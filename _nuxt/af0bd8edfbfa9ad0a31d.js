(window.webpackJsonp=window.webpackJsonp||[]).push([[77,514,515],{1104:function(v,_,e){const t={render:function(){this.$createElement;return this._self._c,this._m(0)},staticRenderFns:[function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("div",{staticClass:"frontmatter-markdown"},[t("h2",[v._v("概述")]),v._v(" "),t("p",[v._v("bash比其他shell大，运行慢，功能强")]),v._v(" "),t("p",[v._v("与高级语言相比，批处理，效率低")]),v._v(" "),t("p",[v._v("shell没有关键字，只有命令（如if，如果if不在行首则可以视为变量或其他成分")]),v._v(" "),t("p",[v._v("真.命令式语言")]),v._v(" "),t("p",[v._v("策略与机制相分离，自己不实现很多功能，由shell之外的命令或程序实现。shell仅提供替换机制")]),v._v(" "),t("p",[v._v("shell自己连四则运算都不会。。")]),v._v(" "),t("h2",[v._v("启动bash")]),v._v(" "),t("ul",[t("li",[v._v("注册 - 登录成功即可\n"),t("ul",[t("li",[v._v("启动后会执行用户主目录下的"),t("code",{pre:!0},[v._v(".bash_profile")]),v._v("进行偏好设置")]),v._v(" "),t("li",[v._v("退出时执行"),t("code",{pre:!0},[v._v(".bash_logout")]),v._v("文件")])])]),v._v(" "),t("li",[v._v("交互式 - 输入bash命令\n"),t("ul",[t("li",[v._v("启动时执行"),t("code",{pre:!0},[v._v(".bashrc")])])])])]),v._v(" "),t("p",[v._v("系统级配置文件：")]),v._v(" "),t("ul",[t("li",[v._v("注册shell启动时执行"),t("code",{pre:!0},[v._v("/etc/profile")]),v._v("文件中的命令")]),v._v(" "),t("li",[v._v("注册shell退出时执行"),t("code",{pre:!0},[v._v("/etc/bash.bash.logout")]),v._v("中的命令")]),v._v(" "),t("li",[v._v("交互式shell启动时执行"),t("code",{pre:!0},[v._v("/etc/bash.bashrc")])])]),v._v(" "),t("h2",[v._v("脚本文件概述与执行")]),v._v(" "),t("p",[v._v("是文本文件。会新建子进程bash，并在子进程执行脚本")]),v._v(" "),t("p",[v._v("使用参数："),t("code",{pre:!0},[v._v("bash [bash-options] script_file script_params")])]),v._v(" "),t("p",[t("code",{pre:!0},[v._v("bash -x")]),v._v("参数显示运行到第几行")]),v._v(" "),t("p",[v._v("可以给文件设置可执行属性"),t("code",{pre:!0},[v._v("chmod u+x filename")]),v._v("，然后使用"),t("code",{pre:!0},[v._v("./filename")]),v._v("即可执行（在子进程的bash中")]),v._v(" "),t("blockquote",[t("p",[v._v("为什么要用"),t("code",{pre:!0},[v._v("./filename")]),v._v("来执行文件而不是直接输入"),t("code",{pre:!0},[v._v("filename")]),v._v("？因为如果仅提供"),t("code",{pre:!0},[v._v("filename")]),v._v("，bash会把它解释为命令（bash会把第一个单词解释为命令，其他为参数），并尝试在环境变量PATH指向的文件夹中进行搜索。PATH默认是不包含当前文件夹的，所以bash找不到此命令。而"),t("code",{pre:!0},[v._v("./filename")]),v._v("则提供了一个路径，告诉bash要在这个路径找可执行文件，所以可以执行。下文中关于环境变量的地方也会提到安全性")])]),v._v(" "),t("p",[t("code",{pre:!0},[v._v(".")]),v._v("是一个命令，意为把后面的命令在"),t("strong",[v._v("当前shell运行")]),v._v("，如"),t("code",{pre:!0},[v._v(". script_name script_params")])]),v._v(" "),t("h2",[v._v("历史")]),v._v(" "),t("h3",[v._v("历史表")]),v._v(" "),t("p",[v._v("历史表 - 保存命令历史。FIFO。大小由环境变量HISTSIZE设定。如果要修改，应该放在"),t("code",{pre:!0},[v._v(".bashrc")]),v._v("文件中")]),v._v(" "),t("p",[v._v("查看历史表 - "),t("code",{pre:!0},[v._v("history")]),v._v("命令，或者查看用户目录下的"),t("code",{pre:!0},[v._v(".bash_history")]),v._v("文件")]),v._v(" "),t("h3",[v._v("历史替换")]),v._v(" "),t("p",[v._v("人机交互的时候可以使用上下箭头获得历史命令")]),v._v(" "),t("p",[v._v("可以使用"),t("code",{pre:!0},[v._v("!!")]),v._v("引用上一命令，使用"),t("code",{pre:!0},[v._v("!str")]),v._v("引用最近的以"),t("code",{pre:!0},[v._v("str")]),v._v("开头的命令")]),v._v(" "),t("h2",[v._v("别名")]),v._v(" "),t("p",[v._v("别名表 - 保存别名。执行任何命令时查询别名表")]),v._v(" "),t("ul",[t("li",[v._v("查看别名表 - 使用命令"),t("code",{pre:!0},[v._v("alias")])]),v._v(" "),t("li",[v._v("添加别名 - "),t("code",{pre:!0},[v._v('alias op_name="commands"')]),v._v("，如"),t("code",{pre:!0},[v._v('alias dir="ls -flad"')]),v._v("，这样在执行dir的时候就会执行"),t("code",{pre:!0},[v._v("ls -flad")])]),v._v(" "),t("li",[v._v("取消别名 - "),t("code",{pre:!0},[v._v("unalias n")])])]),v._v(" "),t("h2",[v._v("tab补全")]),v._v(" "),t("p",[v._v("命令的首个单词会在"),t("code",{pre:!0},[v._v("$PATH")]),v._v("下搜索命令，其他情况搜索当前目录下的文件进行补全")]),v._v(" "),t("h2",[v._v("重定向")]),v._v(" "),t("h3",[v._v("输入重定向")]),v._v(" "),t("ul",[t("li",[t("code",{pre:!0},[v._v("cmd < filename")]),v._v(" "),t("ul",[t("li",[v._v("从数据文件filename获取stdin")])])]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("cmd << word")]),v._v(" "),t("ul",[t("li",[v._v("如果此命令出现在脚本文件中，则从脚本直接获取数据作为stdin直到遇到定界符"),t("code",{pre:!0},[v._v("word")]),v._v("并替换其中的变量与命令")]),v._v(" "),t("li",[v._v("如果是在当前bash执行此命令，则从stdin中读取数据直到遇到定界符"),t("code",{pre:!0},[v._v("word")]),v._v("并替换其中的变量与命令")]),v._v(" "),t("li",[v._v("如果要关闭替换，使用"),t("code",{pre:!0},[v._v("cmd << 'word")]),v._v("，bash会取消替换使用原字符串")])])]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("cmd <<< data")]),v._v(" - 把后面的参数视为stdin，如"),t("code",{pre:!0},[v._v("base64 <<< 123456")])])]),v._v(" "),t("p",[v._v("例：已知脚本文件：")]),v._v(" "),t("pre",{staticClass:"language-bash"},[t("code",{staticClass:"language-bash"},[t("span",{staticClass:"token function"},[v._v("cat")]),v._v(" "),t("span",{staticClass:"token operator"},[v._v("<<")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[v._v("TOAST\nNOW: "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[v._v("`")]),t("span",{pre:!0,attrs:{class:"token function"}},[v._v("date")]),t("span",{pre:!0,attrs:{class:"token variable"}},[v._v("`")])]),v._v("\nMy Home Directory is "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[v._v("$HOME")]),v._v("\nTOAST")]),v._v("\n")])]),v._v(" "),t("p",[v._v("被bash进行重定向后，会先把其中的`date`替换为指令并执行得到当前时间，把"),t("code",{pre:!0},[v._v("$HOME")]),v._v("替换为变量得到用户目录，然后作为stdin输入到cat。则输出应该类似于：")]),v._v(" "),t("pre",[t("code",{pre:!0},[v._v("NOW: Sat Apr 27 17:16:56 CST 2019\nMy Home Directory is /root\n")])]),v._v(" "),t("h3",[v._v("输出重定向")]),v._v(" "),t("p",[v._v("常见输出有2个：")]),v._v(" "),t("ul",[t("li",[v._v("stdout, fd=1")]),v._v(" "),t("li",[v._v("stderr, fd=2")])]),v._v(" "),t("blockquote",[t("p",[v._v("stdin的文件指示符是0")])]),v._v(" "),t("p",[v._v("gcc的错误使用的不是stdout而是stderr，所以more指令会失效")]),v._v(" "),t("p",[v._v("可以使用"),t("code",{pre:!0},[v._v("gcc -c filename 2 > filename2")]),v._v("其中2表示stderr")]),v._v(" "),t("p",[v._v("正常信息可以通过管道，错误信息输出到屏幕")]),v._v(" "),t("p",[v._v("stdout相关输出重定向：")]),v._v(" "),t("ul",[t("li",[t("code",{pre:!0},[v._v("cmd > filename")]),v._v("表示stdout重定向（覆盖")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("cmd >> filename")]),v._v("表示stdout追加到文件尾")])]),v._v(" "),t("p",[v._v("stderr相关输出重定向：")]),v._v(" "),t("ul",[t("li",[t("code",{pre:!0},[v._v("2 > filename")]),v._v("表示把文件句柄2重定向到filename")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("2 > &1")]),v._v("表示把文件句柄2重定向到文件句柄1指向的文件")])]),v._v(" "),t("p",[v._v("允许使用除了0、1、2以外的文件进行重定向，比如命令"),t("code",{pre:!0},[v._v("./myapp 5<a.txt 6>b.txt")]),v._v("，则在程序中可以直接使用文件5和6")]),v._v(" "),t("p",[v._v("例：想把stderr和stdout存放在同一个文件，正确的做法：")]),v._v(" "),t("p",[t("img",{attrs:{src:e(703),alt:""}})]),v._v(" "),t("p",[v._v("错误的做法（顺序错误）：")]),v._v(" "),t("p",[t("img",{attrs:{src:e(704),alt:""}})]),v._v(" "),t("h3",[v._v("管道")]),v._v(" "),t("p",[v._v("前一命令的stdout作为后一个命令的stdin")]),v._v(" "),t("p",[v._v("注意：所有管道命令都是在子shell中运行，父shell负责提供stdout到stdin的数据传输。所以父shell无法共享子shell的局部变量。如"),t("code",{pre:!0},[v._v("echo 123 | read a")]),v._v("，执行完毕后父shell是无法访问变量a的")]),v._v(" "),t("h2",[v._v("变量")]),v._v(" "),t("p",[t("strong",[v._v("无数据类型，只有字符串")])]),v._v(" "),t("p",[v._v("变量名的第一个字符必须是字母，其他可以是字母、数字、下划线")]),v._v(" "),t("p",[v._v("赋值："),t("code",{pre:!0},[v._v("var1=192.168.0.1")])]),v._v(" "),t("p",[v._v("也可以使用命令"),t("code",{pre:!0},[v._v("read")]),v._v("从stdin读取用户输入给变量")]),v._v(" "),t("p",[v._v("注意赋值作为一条命令，"),t("strong",[v._v("等号两侧不允许出现空格")])]),v._v(" "),t("p",[v._v("如果赋值的字符串包含空格，应该使用双引号包裹，如"),t("code",{pre:!0},[v._v('var1="hello world"')])]),v._v(" "),t("p",[v._v("引用变量的两种方法：")]),v._v(" "),t("ul",[t("li",[t("code",{pre:!0},[v._v("$name")])]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("${name}")])])]),v._v(" "),t("p",[v._v("字符串拼接"),t("code",{pre:!0},[v._v("${name}123")])]),v._v(" "),t("p",[v._v("引用未定义的变量，变量值为空字符串")]),v._v(" "),t("p",[v._v("设置shell默认行为（在bash中执行的命令")]),v._v(" "),t("ul",[t("li",[t("code",{pre:!0},[v._v("set -u")]),v._v(" 使用未定义变量时报错")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("set +u")]),v._v(" 未定义变量视为空串（默认")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("set -x")]),v._v(" 执行命令前输出shell替换后的命令与参数。为了区别正常的shell输出，输出前面加"),t("code",{pre:!0},[v._v("+")])]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("set +x")]),v._v(" 取消"),t("code",{pre:!0},[v._v("set -x")])])]),v._v(" "),t("p",[t("code",{pre:!0},[v._v("set")]),v._v("指令，查看环境变量、局部变量和自定义函数")]),v._v(" "),t("h2",[v._v("echo & printf命令")]),v._v(" "),t("blockquote",[t("p",[v._v("echo有些系统不支持，建议printf命令")])]),v._v(" "),t("p",[t("code",{pre:!0},[v._v("echo arg1 arg2 ... argn")]),v._v(" - 输出"),t("code",{pre:!0},[v._v("arg1 arg2 ... argn")]),v._v("，参数之间用空格隔开，最后打印换行符")]),v._v(" "),t("p",[v._v("可以使用"),t("strong",[v._v("转义字符")]),v._v("输出非文字字符，使用选项"),t("code",{pre:!0},[v._v("echo -e")]),v._v("。支持C语言的常用字符串转移和"),t("code",{pre:!0},[v._v("\\c")])]),v._v(" "),t("p",[v._v("常用转义：")]),v._v(" "),t("ul",[t("li",[t("code",{pre:!0},[v._v("\\c")]),v._v(" - 打印完毕，不换行")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("\\b")]),v._v(" - 退格")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("\\n")]),v._v(" - 换行")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("\\r")]),v._v(" - 回车")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("\\t")]),v._v(" - 水平制表")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("\\\\")]),v._v(" - 反斜线")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("\\nnn")]),v._v(" - 三个八进制数描述的字符ASCII码")])]),v._v(" "),t("p",[v._v("举例：")]),v._v(" "),t("ul",[t("li",[t("code",{pre:!0},[v._v("echo Beijing   China")]),v._v(" - 输出Beijing和China，中间只有一个空格")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v('echo "Beijing    China')]),v._v(" - 输出Beijing和China，中间有实际传入的空格")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("echo -e '\\065'")]),v._v(" - 输出5")])]),v._v(" "),t("p",[v._v("printf命令和C语言的printf相似，如"),t("code",{pre:!0},[v._v("printf 'My Home is %s\\n' $HOME")])]),v._v(" "),t("h2",[v._v("环境变量与局部变量")]),v._v(" "),t("p",[v._v("默认创建的shell变量为局部变量")]),v._v(" "),t("p",[v._v("使用"),t("code",{pre:!0},[v._v("export var1")]),v._v("把局部变量变为环境变量")]),v._v(" "),t("p",[v._v("shell启动的"),t("strong",[v._v("子进程继承环境变量，不继承局部变量")])]),v._v(" "),t("p",[v._v("子进程对环境变量的修改"),t("strong",[v._v("不影响")]),v._v("父进程的环境变量")]),v._v(" "),t("p",[v._v("系统环境变量：")]),v._v(" "),t("ul",[t("li",[t("code",{pre:!0},[v._v("HOME")]),v._v(" - 用户主目录的路径")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("PATH")]),v._v(" - 查找命令的路径\n"),t("ul",[t("li",[v._v("与windows不同，"),t("strong",[v._v("PATH不搜索当前目录")]),v._v("，因为搜索当前目录很危险（比如当前目录有一个叫ls的程序，程序内容是删库")]),v._v(" "),t("li",[v._v("PATH的格式 - 多个目录使用"),t("code",{pre:!0},[v._v(":")]),v._v("隔开。从前向后依次搜索")]),v._v(" "),t("li",[v._v("可以在PATH中添加当前目录，只需要添加"),t("code",{pre:!0},[v._v(".")]),v._v("到PATH中就可以，但是正如上面所说，"),t("strong",[v._v("非常危险不建议使用")])])])]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("TERM")]),v._v(" - 终端类型")])]),v._v(" "),t("p",[v._v("相关命令：")]),v._v(" "),t("ul",[t("li",[t("code",{pre:!0},[v._v("set")]),v._v(" - shell内部命令。列出当前所有变量及其值、自定义函数（包括环境变量和局部变量")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("env")]),v._v(" - 外部命令，路径为"),t("code",{pre:!0},[v._v("/bin/env")]),v._v("，列出环境变量及其值")])]),v._v(" "),t("p",[v._v("可以在shell里面直接用"),t("code",{pre:!0},[v._v("=")]),v._v("给变量赋值，如"),t("code",{pre:!0},[v._v("abc=123")]),v._v("。和在脚本中一样，等号两边不允许有空格，否则就变成了执行"),t("code",{pre:!0},[v._v("abc")]),v._v("这个命令，参数是"),t("code",{pre:!0},[v._v("=")]),v._v(" & "),t("code",{pre:!0},[v._v("123")]),v._v("了")]),v._v(" "),t("p",[v._v("也可以在执行某个程序的时候给特定变量赋值，如"),t("code",{pre:!0},[v._v("abc=123 ./a")])]),v._v(" "),t("p",[v._v("main函数第三个参数是环境变量"),t("code",{pre:!0},[v._v("char ** env")])]),v._v(" "),t("h2",[v._v("shell替换")]),v._v(" "),t("p",[v._v("shell的工作内容就是替换命令然后执行命令")]),v._v(" "),t("ul",[t("li",[v._v("变量替换 - 使用"),t("code",{pre:!0},[v._v("$")]),v._v("，如"),t("code",{pre:!0},[v._v("$HOME")])]),v._v(" "),t("li",[v._v("文件名生成 - 使用文件通配符"),t("code",{pre:!0},[v._v("*")]),v._v("等，按照字典序排列。如果没有可匹配文件，则保持带有"),t("code",{pre:!0},[v._v("*")]),v._v("的原文")]),v._v(" "),t("li",[v._v("命令替换 - 使用"),t("code",{pre:!0},[v._v("`cmd`")]),v._v("，如"),t("code",{pre:!0},[v._v("now=`date`")]),v._v("会执行命令"),t("code",{pre:!0},[v._v("date")]),v._v("之后用stdout替换字符串\n"),t("ul",[t("li",[v._v("命令替换可以使用"),t("code",{pre:!0},[v._v("$(cmd)")])])])])]),v._v(" "),t("h2",[v._v("shell内部变量 - 位置参数")]),v._v(" "),t("ul",[t("li",[t("code",{pre:!0},[v._v("$0")]),v._v(" - 脚本文件本身的名字")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("$1, $2, ...")]),v._v(" - 脚本文件的命令行参数")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("$#")]),v._v(" - 命令行参数的个数")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v('"$*"')]),v._v(" - "),t("code",{pre:!0},[v._v('"$1 $2 ..."')])]),v._v(" "),t("li",[t("code",{pre:!0},[v._v('"$@"')]),v._v(" - "),t("code",{pre:!0},[v._v('"$1" "$2" "$3" ...')]),v._v(" "),t("ul",[t("li",[v._v("用来把变长的命令行参数传递给命令")])])])]),v._v(" "),t("p",[v._v("命令"),t("code",{pre:!0},[v._v("shift")]),v._v("所有参数左移，参数数量"),t("code",{pre:!0},[v._v("$#")]),v._v("-1。可以加上一个数字作为左移数量，如"),t("code",{pre:!0},[v._v("shift 3")])]),v._v(" "),t("h2",[v._v("shell元字符与转义")]),v._v(" "),t("ul",[t("li",[v._v("空格与制表符 - 命令行参数的分隔符")]),v._v(" "),t("li",[v._v("回车 - 执行命令")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("<>|")]),v._v(" - 重定向与管道")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v(";")]),v._v(" - 用于一行内输入多个命令")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("&")]),v._v(" - 后台运行")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("$")]),v._v(" - 引用shell变量")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("`")]),v._v(" - 用于命令替换")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("*[]?")]),v._v(" - 用于文件通配符")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("\\")]),v._v(" - 转义，取消元字符的作用")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("()")]),v._v(" - 用于定义shell函数或者在子shell中执行一组命令")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v('"')]),v._v(" - 忽略除了"),t("code",{pre:!0},[v._v("$")]),v._v("和"),t("code",{pre:!0},[v._v("`")]),v._v("之外的元字符。剩下的需要转义的字符："),t("code",{pre:!0},[v._v('\\"')]),v._v(" & "),t("code",{pre:!0},[v._v("\\$")]),v._v(" & "),t("code",{pre:!0},[v._v("\\`")]),v._v(" & "),t("code",{pre:!0},[v._v("\\\\")])]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("'")]),v._v(" - 忽略所有元字符，包括转义字符。所以单引号引起的字符串里面不能出现单引号")])]),v._v(" "),t("p",[t("code",{pre:!0},[v._v("()<>|;&")]),v._v("这些字符自身起到分隔符的作用")]),v._v(" "),t("p",[v._v("转义字符后面跟非特殊字符，不同场合处理方式不同")]),v._v(" "),t("ul",[t("li",[v._v("如果在引号内（单引号或双引号），则维持字面含义，交给命令去处理转义。如"),t("code",{pre:!0},[v._v('printf "\\n"')]),v._v("就会把"),t("code",{pre:!0},[v._v("\\n")]),v._v("交给printf命令处理")]),v._v(" "),t("li",[v._v("如果没有引号，则为"),t("em",[v._v("未定义")]),v._v("的情况。通常忽略"),t("code",{pre:!0},[v._v("\\")]),v._v("，如"),t("code",{pre:!0},[v._v("echo \\n")]),v._v("会把n交给echo处理")])]),v._v(" "),t("h2",[v._v("shell逻辑判断")]),v._v(" "),t("h3",[v._v("命令返回值")]),v._v(" "),t("p",[v._v("判断依据 - 命令返回值是否为0。0表示命令执行成功")]),v._v(" "),t("p",[v._v("命令的返回值为main函数的返回值，或调用了系统调用"),t("code",{pre:!0},[v._v("exit(code)")]),v._v("进行返回。exit函数的参数取值为0-255")]),v._v(" "),t("p",[v._v("如果main函数没有return则返回随机值，不能用来作为条件判断")]),v._v(" "),t("p",[v._v("shell内部变量"),t("code",{pre:!0},[v._v("$?")]),v._v("可以获取上一个命令的返回码")]),v._v(" "),t("p",[v._v("使用管道连接的各个命令，条件判断时以最后一个命令的返回值为准")]),v._v(" "),t("h3",[v._v("复合逻辑")]),v._v(" "),t("p",[v._v("满足"),t("strong",[v._v("短路计算")]),v._v("特性")]),v._v(" "),t("ul",[t("li",[t("code",{pre:!0},[v._v("cmd1 && cmd2")]),v._v(" - 如果cmd1执行成功则执行cmd2")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("cmd1 || cmd2")]),v._v(" - 如果cmd1执行失败则执行cmd2")])]),v._v(" "),t("p",[v._v("命令"),t("code",{pre:!0},[v._v("true")]),v._v(" & "),t("code",{pre:!0},[v._v("false")]),v._v("是两个程序，返回值分别为0和非0。位置在"),t("code",{pre:!0},[v._v("/bin/true")]),v._v(" & "),t("code",{pre:!0},[v._v("/bin/false")]),v._v("。有的shell为了提高效率把这两个值设为内部命令")]),v._v(" "),t("h3",[v._v("逻辑判断命令")]),v._v(" "),t("p",[v._v("分别是命令"),t("code",{pre:!0},[v._v("[")]),v._v("和命令"),t("code",{pre:!0},[v._v("test")])]),v._v(" "),t("blockquote",[t("p",[v._v("注意"),t("code",{pre:!0},[v._v("[")]),v._v("是一个命令而不是一个词法符号。路径为"),t("code",{pre:!0},[v._v("/usr/bin/[")])])]),v._v(" "),t("p",[v._v("命令"),t("code",{pre:!0},[v._v("[")]),v._v("要求最后一个命令行参数必须为"),t("code",{pre:!0},[v._v("]")]),v._v("。其他功能和命令"),t("code",{pre:!0},[v._v("test")]),v._v("相同。有的Linux系统把"),t("code",{pre:!0},[v._v("/usr/bin/[")]),v._v("设置为指向"),t("code",{pre:!0},[v._v("test")]),v._v("的符号链接文件")]),v._v(" "),t("p",[v._v("例："),t("code",{pre:!0},[v._v("test -r /etc/motd")]),v._v("等价于"),t("code",{pre:!0},[v._v("[ -r /etc/motd ]")])]),v._v(" "),t("p",[v._v("用法：")]),v._v(" "),t("ul",[t("li",[v._v("文件特性检测\n"),t("ul",[t("li",[t("code",{pre:!0},[v._v("-f")]),v._v(" - 普通文件")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("-d")]),v._v(" - 目录文件")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("-r")]),v._v(" - 可读")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("-w")]),v._v(" - 可写")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("-x")]),v._v(" - 可执行")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("-s")]),v._v(" - size>0")]),v._v(" "),t("li",[v._v("例："),t("code",{pre:!0},[v._v("[ -r /etc/motd ] && echo readable")])])])]),v._v(" "),t("li",[v._v("字符串比较\n"),t("ul",[t("li",[t("code",{pre:!0},[v._v("=")]),v._v(" - 字符串相等。可以使用"),t("code",{pre:!0},[v._v("==")])]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("!=")]),v._v(" - 字符串不等")]),v._v(" "),t("li",[v._v("例："),t("code",{pre:!0},[v._v('[ "$a" = "" ]')]),v._v("判断"),t("code",{pre:!0},[v._v("$a")]),v._v("是否为空。记得加引号，因为如果"),t("code",{pre:!0},[v._v("$a")]),v._v("为空被shell替换，不加引号就会忽略此参数")]),v._v(" "),t("li",[v._v("注意等号和不等号两侧的空格不能省略。因为他们是作为参数传进命令的")])])]),v._v(" "),t("li",[v._v("整数比较\n"),t("ul",[t("li",[t("code",{pre:!0},[v._v("-eq")]),v._v(" - equal")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("-ne")]),v._v(" - not equal")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("-gt")]),v._v(" - greater than")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("-ge")]),v._v(" - greater equal")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("-lt")]),v._v(" - less than")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("-le")]),v._v(" - less equal")])])]),v._v(" "),t("li",[v._v("复合条件\n"),t("ul",[t("li",[t("code",{pre:!0},[v._v("!")]),v._v(" - not")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("-o")]),v._v(" - or")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("-a")]),v._v(" - and")])])])]),v._v(" "),t("h2",[v._v("命令组合")]),v._v(" "),t("p",[v._v("类似于C语言的复合语句，组合在一起的命令视为一个整体。可以集体管道、重定向，或者满足条件时执行多个命令")]),v._v(" "),t("p",[v._v("例：")]),v._v(" "),t("pre",{staticClass:"language-bash"},[t("code",{staticClass:"language-bash"},[t("span",{staticClass:"token builtin class-name"},[v._v("pwd")]),v._v("\n"),t("span",{staticClass:"token assign-left variable"},[v._v("DIR")]),t("span",{staticClass:"token operator"},[v._v("=")]),v._v("/usr/bin\n"),t("span",{staticClass:"token punctuation"},[v._v("[")]),v._v(" -d "),t("span",{staticClass:"token variable"},[v._v("$DIR")]),v._v(" "),t("span",{staticClass:"token punctuation"},[v._v("]")]),v._v(" "),t("span",{staticClass:"token operator"},[v._v("&&")]),v._v(" "),t("span",{staticClass:"token punctuation"},[v._v("{")]),v._v("\n  "),t("span",{staticClass:"token builtin class-name"},[v._v("cd")]),v._v(" "),t("span",{staticClass:"token variable"},[v._v("$DIR")]),v._v("\n  "),t("span",{staticClass:"token builtin class-name"},[v._v("echo")]),v._v(" "),t("span",{staticClass:"token string"},[v._v('"Current Directory is '),t("span",{staticClass:"token variable"},[t("span",{staticClass:"token variable"},[v._v("`")]),t("span",{staticClass:"token builtin class-name"},[v._v("pwd")]),t("span",{staticClass:"token variable"},[v._v("`")])]),v._v('"')]),v._v("\n  "),t("span",{staticClass:"token builtin class-name"},[v._v("echo")]),v._v(" "),t("span",{staticClass:"token string"},[v._v('"'),t("span",{staticClass:"token variable"},[t("span",{staticClass:"token variable"},[v._v("`")]),t("span",{staticClass:"token function"},[v._v("ls")]),v._v(" "),t("span",{staticClass:"token operator"},[v._v("|")]),v._v(" "),t("span",{staticClass:"token function"},[v._v("wc")]),v._v(" -l"),t("span",{staticClass:"token variable"},[v._v("`")])]),v._v(' files"')]),v._v("\n"),t("span",{staticClass:"token punctuation"},[v._v("}")]),v._v("\n"),t("span",{staticClass:"token builtin class-name"},[v._v("pwd")]),v._v("\n")])]),v._v(" "),t("p",[v._v("可以使用"),t("code",{pre:!0},[v._v("{}")]),v._v("和"),t("code",{pre:!0},[v._v("()")]),v._v("进行命令组合。使用"),t("code",{pre:!0},[v._v("{}")]),v._v("表示在当前shell执行，使用"),t("code",{pre:!0},[v._v("()")]),v._v("表示在子shell执行")]),v._v(" "),t("p",[t("strong",[v._v("注意")]),v._v("："),t("code",{pre:!0},[v._v("{}")]),v._v("并不是shell的元字符，而是作为特殊的命令处理，也就是命令"),t("code",{pre:!0},[v._v("{")]),v._v("和命令"),t("code",{pre:!0},[v._v("}")]),v._v("，所以需要主动分隔大括号和普通命令。如果是在shell文件中，那么可以使用换行解决（把换行解释为"),t("code",{pre:!0},[v._v(";")]),v._v("）。如果写在同一行，那么左大括号右面要有一个空格（因为"),t("code",{pre:!0},[v._v("{")]),v._v("是命令），右大括号前面要有"),t("code",{pre:!0},[v._v(";")]),v._v("作为命令的分隔，如"),t("code",{pre:!0},[v._v("{ ls -l; ps;}")]),v._v("。而"),t("code",{pre:!0},[v._v("()")]),v._v("是shell元字符，只需要"),t("code",{pre:!0},[v._v("(ls -l;ps)")]),v._v("就行，不需要多余的空格和分号")]),v._v(" "),t("h2",[v._v("条件分支")]),v._v(" "),t("h3",[v._v("if")]),v._v(" "),t("p",[v._v("语法：")]),v._v(" "),t("pre",{staticClass:"language-bash"},[t("code",{staticClass:"language-bash"},[t("span",{staticClass:"token keyword"},[v._v("if")]),v._v(" condition\n"),t("span",{staticClass:"token keyword"},[v._v("then")]),v._v("\n  list\n"),t("span",{staticClass:"token keyword"},[v._v("elif")]),v._v(" confition\n"),t("span",{staticClass:"token keyword"},[v._v("then")]),v._v("\n  list\n"),t("span",{staticClass:"token keyword"},[v._v("else")]),v._v("\n  list\n"),t("span",{staticClass:"token keyword"},[v._v("fi")]),v._v("\n")])]),v._v(" "),t("p",[v._v("其中"),t("code",{pre:!0},[v._v("if/then/elif/else/fi")]),v._v("为"),t("strong",[v._v("内部命令")]),v._v("（shell没有关键字之说）。原理应该是给shell内部某个flag变量赋值")]),v._v(" "),t("p",[v._v("合并行：")]),v._v(" "),t("ul",[t("li",[t("code",{pre:!0},[v._v("then")]),v._v("可以和then后面的list合并为一行")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("if")]),v._v("不可以和"),t("code",{pre:!0},[v._v("then")]),v._v("合并。但是可以通过分号合并，如"),t("code",{pre:!0},[v._v("if condition;then")])]),v._v(" "),t("li",[v._v("与C语言不同，then与else或fi配对，不需要大括号")])]),v._v(" "),t("h3",[v._v("case")]),v._v(" "),t("p",[v._v("语法：")]),v._v(" "),t("pre",{staticClass:"language-bash"},[t("code",{staticClass:"language-bash"},[t("span",{staticClass:"token keyword"},[v._v("case")]),v._v(" word "),t("span",{staticClass:"token keyword"},[v._v("in")]),v._v("\npattern1"),t("span",{staticClass:"token punctuation"},[v._v(")")]),v._v(" list1"),t("span",{staticClass:"token punctuation"},[v._v(";")]),t("span",{staticClass:"token punctuation"},[v._v(";")]),v._v("\npattern2"),t("span",{staticClass:"token punctuation"},[v._v(")")]),v._v(" list2"),t("span",{staticClass:"token punctuation"},[v._v(";")]),t("span",{staticClass:"token punctuation"},[v._v(";")]),v._v("\n"),t("span",{staticClass:"token punctuation"},[v._v("..")]),v._v(".\n"),t("span",{staticClass:"token keyword"},[v._v("esac")]),v._v("\n")])]),v._v(" "),t("p",[v._v("注意：")]),v._v(" "),t("ul",[t("li",[v._v("word与pattern匹配使用的是shell的文件名匹配规则")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v(";;")]),v._v("是一个整体，不能在两个分号间加空格，也不能用空行代替")]),v._v(" "),t("li",[v._v("可以使用竖线表示多个模式")]),v._v(" "),t("li",[v._v("如果存在word匹配多个pattern，则仅执行第一个匹配的命令表")])]),v._v(" "),t("p",[v._v("实例：")]),v._v(" "),t("pre",{staticClass:"language-bash"},[t("code",{staticClass:"language-bash"},[t("span",{staticClass:"token keyword"},[v._v("case")]),v._v(" "),t("span",{staticClass:"token string"},[v._v('"'),t("span",{staticClass:"token variable"},[v._v("$1")]),v._v('"')]),v._v(" "),t("span",{staticClass:"token keyword"},[v._v("in")]),v._v("\nstart"),t("span",{staticClass:"token punctuation"},[v._v(")")]),v._v("\n  "),t("span",{staticClass:"token builtin class-name"},[v._v("echo")]),v._v(" "),t("span",{staticClass:"token string"},[v._v('"start service"')]),v._v("\n  "),t("span",{staticClass:"token punctuation"},[v._v(";")]),t("span",{staticClass:"token punctuation"},[v._v(";")]),v._v("\nstop"),t("span",{staticClass:"token punctuation"},[v._v(")")]),v._v("\n  "),t("span",{staticClass:"token builtin class-name"},[v._v("echo")]),v._v(" "),t("span",{staticClass:"token string"},[v._v('"stop service"')]),v._v("\n  "),t("span",{staticClass:"token punctuation"},[v._v(";")]),t("span",{staticClass:"token punctuation"},[v._v(";")]),v._v("\nforce-reload"),t("span",{staticClass:"token operator"},[v._v("|")]),v._v("restart"),t("span",{staticClass:"token punctuation"},[v._v(")")]),v._v("\n  "),t("span",{staticClass:"token variable"},[v._v("$0")]),v._v(" stop\n  "),t("span",{staticClass:"token variable"},[v._v("$0")]),v._v(" start\n  "),t("span",{staticClass:"token punctuation"},[v._v(";")]),t("span",{staticClass:"token punctuation"},[v._v(";")]),v._v("\nstatus"),t("span",{staticClass:"token punctuation"},[v._v(")")]),v._v("\n  "),t("span",{staticClass:"token builtin class-name"},[v._v("echo")]),v._v(" "),t("span",{staticClass:"token string"},[v._v('"this is the status"')]),v._v("\n  "),t("span",{staticClass:"token punctuation"},[v._v(";")]),t("span",{staticClass:"token punctuation"},[v._v(";")]),v._v("\n*"),t("span",{staticClass:"token punctuation"},[v._v(")")]),v._v("\n  "),t("span",{staticClass:"token builtin class-name"},[v._v("echo")]),v._v(" "),t("span",{staticClass:"token string"},[v._v('"Usage: '),t("span",{staticClass:"token variable"},[v._v("$0")]),v._v(' {start|stop|restart|force-reload|status}"')]),v._v("\n  "),t("span",{staticClass:"token builtin class-name"},[v._v("exit")]),v._v(" "),t("span",{staticClass:"token number"},[v._v("1")]),v._v("\n  "),t("span",{staticClass:"token punctuation"},[v._v(";")]),t("span",{staticClass:"token punctuation"},[v._v(";")]),v._v("\n"),t("span",{staticClass:"token keyword"},[v._v("esac")]),v._v("\n")])]),v._v(" "),t("h2",[v._v("注释")]),v._v(" "),t("p",[v._v("使用"),t("code",{pre:!0},[v._v("#")]),v._v("作为注释")]),v._v(" "),t("h2",[v._v("表达式计算")]),v._v(" "),t("p",[v._v("shell内部只有字符串这一种数据类型。不支持四则运算、正则表达式运算等。需要借助其他命令实现")]),v._v(" "),t("p",[v._v("有的shell（包括bash）为了提高效率，提供内部命令版本的"),t("code",{pre:!0},[v._v("echo/printf/expr/test/[")]),v._v("命令。仅仅是性能优化措施。")]),v._v(" "),t("p",[t("code",{pre:!0},[v._v("expr")]),v._v("支持：")]),v._v(" "),t("ul",[t("li",[t("code",{pre:!0},[v._v("()")]),v._v(" - 括号")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("+-*/%")]),v._v(" - 算术运算")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("> >= < <= = !=")]),v._v(" - 关系运算")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v("| &")]),v._v(" - 逻辑运算")]),v._v(" "),t("li",[t("code",{pre:!0},[v._v(":")]),v._v(" - 正则表达式运算")])]),v._v(" "),t("p",[v._v("注意"),t("strong",[v._v("转义")]),v._v("。以及，"),t("code",{pre:!0},[v._v("expr")]),v._v("是命令，所以需要必要的空格作为分隔，如计算"),t("code",{pre:!0},[v._v("x=a*(b+c)")]),v._v("：")]),v._v(" "),t("pre",{staticClass:"language-bash"},[t("code",{staticClass:"language-bash"},[t("span",{staticClass:"token assign-left variable"},[v._v("x")]),t("span",{staticClass:"token operator"},[v._v("=")]),t("span",{staticClass:"token variable"},[t("span",{staticClass:"token variable"},[v._v("`")]),t("span",{staticClass:"token function"},[v._v("expr")]),v._v(" $a "),t("span",{staticClass:"token punctuation"},[v._v("\\")]),v._v("* "),t("span",{staticClass:"token punctuation"},[v._v("\\")]),t("span",{staticClass:"token punctuation"},[v._v("(")]),v._v(" $b + $c "),t("span",{staticClass:"token punctuation"},[v._v("\\")]),t("span",{staticClass:"token punctuation"},[v._v(")")]),t("span",{staticClass:"token variable"},[v._v("`")])]),v._v("\n"),t("span",{staticClass:"token assign-left variable"},[v._v("x")]),t("span",{staticClass:"token operator"},[v._v("=")]),t("span",{staticClass:"token variable"},[t("span",{staticClass:"token variable"},[v._v("`")]),t("span",{staticClass:"token function"},[v._v("expr")]),v._v(" $a "),t("span",{staticClass:"token string"},[v._v("'*'")]),v._v(" "),t("span",{staticClass:"token string"},[v._v("'('")]),v._v(" $b + $c "),t("span",{staticClass:"token string"},[v._v("')'")]),t("span",{staticClass:"token variable"},[v._v("`")])]),v._v("\n")])]),v._v(" "),t("p",[v._v("正则表达式的用法："),t("code",{pre:!0},[v._v("expr string : pattern")]),v._v("，输出匹配长度。如果pattern中有使用"),t("code",{pre:!0},[v._v("\\(")]),v._v("&"),t("code",{pre:!0},[v._v("\\)")]),v._v("括起来的部分，如果匹配则打印括号内能匹配的部分，否则打印空串。例：")]),v._v(" "),t("pre",{staticClass:"language-bash"},[t("code",{staticClass:"language-bash"},[t("span",{staticClass:"token function"},[v._v("expr")]),v._v(" "),t("span",{staticClass:"token number"},[v._v("123")]),v._v(" "),t("span",{staticClass:"token builtin class-name"},[v._v(":")]),v._v(" "),t("span",{staticClass:"token string"},[v._v('"[0-9]*"')]),v._v(" "),t("span",{staticClass:"token comment"},[v._v("# output: 3")]),v._v("\n"),t("span",{staticClass:"token function"},[v._v("expr")]),v._v(" A123 "),t("span",{staticClass:"token builtin class-name"},[v._v(":")]),v._v(" "),t("span",{staticClass:"token string"},[v._v('"[0-9]*"')]),v._v(" "),t("span",{staticClass:"token comment"},[v._v("# output: 0")]),v._v("\n"),t("span",{staticClass:"token function"},[v._v("expr")]),v._v(" "),t("span",{staticClass:"token string"},[v._v('"'),t("span",{staticClass:"token variable"},[v._v("$unit")]),v._v('"')]),v._v(" "),t("span",{staticClass:"token builtin class-name"},[v._v(":")]),v._v(" "),t("span",{staticClass:"token string"},[v._v('".*"')]),v._v(" "),t("span",{staticClass:"token comment"},[v._v("# output: length of $unit")]),v._v("\n"),t("span",{staticClass:"token function"},[v._v("expr")]),v._v(" "),t("span",{staticClass:"token variable"},[t("span",{staticClass:"token variable"},[v._v("`")]),t("span",{staticClass:"token builtin class-name"},[v._v("pwd")]),t("span",{staticClass:"token variable"},[v._v("`")])]),v._v(" "),t("span",{staticClass:"token builtin class-name"},[v._v(":")]),v._v(" "),t("span",{staticClass:"token string"},[v._v("'.*/\\([^/]*\\)$'")]),v._v(" "),t("span",{staticClass:"token comment"},[v._v("# output: 路径的最后一个分量")]),v._v("\n")])]),v._v(" "),t("h2",[v._v("eval")]),v._v(" "),t("p",[v._v("把程序的输入或者数据作为程序来执行")]),v._v(" "),t("p",[v._v("例：")]),v._v(" "),t("pre",{staticClass:"language-bash"},[t("code",{staticClass:"language-bash"},[t("span",{staticClass:"token assign-left variable"},[v._v("a")]),t("span",{staticClass:"token operator"},[v._v("=")]),t("span",{staticClass:"token number"},[v._v("100")]),v._v("\n"),t("span",{staticClass:"token assign-left variable"},[v._v("b")]),t("span",{staticClass:"token operator"},[v._v("=")]),t("span",{staticClass:"token number"},[v._v("200")]),v._v("\n"),t("span",{staticClass:"token builtin class-name"},[v._v("read")]),v._v(" line\n"),t("span",{staticClass:"token builtin class-name"},[v._v("eval")]),v._v(" "),t("span",{staticClass:"token string"},[v._v('"'),t("span",{staticClass:"token variable"},[v._v("$line")]),v._v('"')]),v._v("\n"),t("span",{staticClass:"token builtin class-name"},[v._v("echo")]),v._v(" "),t("span",{staticClass:"token variable"},[v._v("$result")]),v._v("\n")])]),v._v(" "),t("p",[v._v("输入"),t("code",{pre:!0},[v._v("result=`expr $a + $b + 1000`")])]),v._v(" "),t("h2",[v._v("循环")]),v._v(" "),t("h3",[v._v("while")]),v._v(" "),t("p",[v._v("语法：")]),v._v(" "),t("pre",{staticClass:"language-bash"},[t("code",{staticClass:"language-bash"},[t("span",{staticClass:"token keyword"},[v._v("while")]),v._v(" condition\n"),t("span",{staticClass:"token keyword"},[v._v("do")]),v._v("\n  list\n"),t("span",{staticClass:"token keyword"},[v._v("done")]),v._v("\n")])]),v._v(" "),t("p",[v._v("实现计数：")]),v._v(" "),t("pre",{staticClass:"language-bash"},[t("code",{staticClass:"language-bash"},[t("span",{staticClass:"token keyword"},[v._v("if")]),v._v(" "),t("span",{staticClass:"token punctuation"},[v._v("[")]),v._v(" "),t("span",{staticClass:"token variable"},[v._v("$#")]),v._v(" "),t("span",{staticClass:"token operator"},[v._v("=")]),v._v(" "),t("span",{staticClass:"token number"},[v._v("0")]),v._v(" "),t("span",{staticClass:"token punctuation"},[v._v("]")]),v._v("\n"),t("span",{staticClass:"token keyword"},[v._v("then")]),v._v("\n  "),t("span",{staticClass:"token builtin class-name"},[v._v("echo")]),v._v(" "),t("span",{staticClass:"token string"},[v._v('"Usage: '),t("span",{staticClass:"token variable"},[v._v("$0")]),v._v(' : <number>"')]),v._v("\n"),t("span",{staticClass:"token keyword"},[v._v("else")]),v._v("\n  "),t("span",{staticClass:"token assign-left variable"},[v._v("count")]),t("span",{staticClass:"token operator"},[v._v("=")]),t("span",{staticClass:"token variable"},[v._v("$1")]),v._v("\n  "),t("span",{staticClass:"token keyword"},[v._v("while")]),v._v(" "),t("span",{staticClass:"token punctuation"},[v._v("[")]),v._v(" "),t("span",{staticClass:"token variable"},[v._v("$count")]),v._v(" -gt "),t("span",{staticClass:"token number"},[v._v("0")]),v._v(" "),t("span",{staticClass:"token punctuation"},[v._v("]")]),v._v("\n  "),t("span",{staticClass:"token keyword"},[v._v("do")]),v._v("\n    "),t("span",{staticClass:"token assign-left variable"},[v._v("count")]),t("span",{staticClass:"token operator"},[v._v("=")]),t("span",{staticClass:"token variable"},[t("span",{staticClass:"token variable"},[v._v("`")]),t("span",{staticClass:"token function"},[v._v("expr")]),v._v(" $count - "),t("span",{staticClass:"token number"},[v._v("1")]),t("span",{staticClass:"token variable"},[v._v("`")])]),v._v("\n    "),t("span",{staticClass:"token builtin class-name"},[v._v("echo")]),v._v(" -e "),t("span",{staticClass:"token string"},[v._v('"'),t("span",{staticClass:"token entity",attrs:{title:"\\015"}},[v._v("\\015")]),v._v(" "),t("span",{staticClass:"token variable"},[v._v("$count")]),v._v(" "),t("span",{staticClass:"token entity",attrs:{title:"\\c"}},[v._v("\\c")]),v._v('"')]),v._v("\n    "),t("span",{staticClass:"token function"},[v._v("sleep")]),v._v(" "),t("span",{staticClass:"token number"},[v._v("1")]),v._v("\n  "),t("span",{staticClass:"token keyword"},[v._v("done")]),v._v("\n"),t("span",{staticClass:"token keyword"},[v._v("fi")]),v._v("\n")])]),v._v(" "),t("h3",[v._v("for")]),v._v(" "),t("p",[v._v("语法1：")]),v._v(" "),t("pre",{staticClass:"language-bash"},[t("code",{staticClass:"language-bash"},[t("span",{staticClass:"token keyword"},[v._v("for")]),v._v(" "),t("span",{staticClass:"token for-or-select variable"},[v._v("name")]),v._v(" "),t("span",{staticClass:"token keyword"},[v._v("in")]),v._v(" word1 word2 "),t("span",{staticClass:"token punctuation"},[v._v("..")]),v._v(".\n"),t("span",{staticClass:"token keyword"},[v._v("do")]),v._v("\n  list\n"),t("span",{staticClass:"token keyword"},[v._v("done")]),v._v("\n")])]),v._v(" "),t("p",[v._v("语法2：")]),v._v(" "),t("pre",{staticClass:"language-bash"},[t("code",{staticClass:"language-bash"},[t("span",{staticClass:"token keyword"},[v._v("for")]),v._v(" name\n"),t("span",{staticClass:"token keyword"},[v._v("do")]),v._v("\n  list\n"),t("span",{staticClass:"token keyword"},[v._v("done")]),v._v("\n"),t("span",{staticClass:"token comment"},[v._v("# equal to:")]),v._v("\n"),t("span",{staticClass:"token comment"},[v._v("# for name in $1 $2 ...")]),v._v("\n"),t("span",{staticClass:"token comment"},[v._v("# do")]),v._v("\n"),t("span",{staticClass:"token comment"},[v._v("#   list")]),v._v("\n"),t("span",{staticClass:"token comment"},[v._v("# done")]),v._v("\n")])]),v._v(" "),t("p",[t("code",{pre:!0},[v._v("seq")]),v._v("命令，生成数组：")]),v._v(" "),t("pre",{staticClass:"language-bash"},[t("code",{staticClass:"language-bash"},[t("span",{staticClass:"token keyword"},[v._v("for")]),v._v(" "),t("span",{staticClass:"token for-or-select variable"},[v._v("i")]),v._v(" "),t("span",{staticClass:"token keyword"},[v._v("in")]),v._v(" "),t("span",{staticClass:"token variable"},[t("span",{staticClass:"token variable"},[v._v("`")]),t("span",{staticClass:"token function"},[v._v("seq")]),v._v(" "),t("span",{staticClass:"token number"},[v._v("1")]),v._v(" "),t("span",{staticClass:"token number"},[v._v("2")]),v._v(" "),t("span",{staticClass:"token number"},[v._v("3")]),v._v(" "),t("span",{staticClass:"token number"},[v._v("99")]),t("span",{staticClass:"token variable"},[v._v("`")])]),v._v("\n"),t("span",{staticClass:"token keyword"},[v._v("do")]),v._v("\n  "),t("span",{staticClass:"token function"},[v._v("ping")]),v._v(" "),t("span",{staticClass:"token number"},[v._v("192.168")]),v._v(".0."),t("span",{staticClass:"token variable"},[v._v("$i")]),v._v("\n"),t("span",{staticClass:"token keyword"},[v._v("done")]),v._v("\n")])]),v._v(" "),t("h3",[v._v("break & continue & exit")]),v._v(" "),t("p",[v._v("break在循环中使用，终止循环。可以加上一个数字作为参数表示终止的循环层数")]),v._v(" "),t("p",[v._v("continue参考C语言")]),v._v(" "),t("p",[v._v("exit结束脚本程序的执行。参数为脚本返回码")]),v._v(" "),t("h2",[v._v("shell函数")]),v._v(" "),t("p",[v._v("语法："),t("code",{pre:!0},[v._v("name() { list;}")])]),v._v(" "),t("p",[v._v("函数定义完成之后可以作为一个自定义的内部命令执行。后面可以调用")]),v._v(" "),t("p",[v._v("调用的时候可以加参数，在函数体内部使用"),t("code",{pre:!0},[v._v("$1 $2 $* $@")]),v._v("等方式引用")]),v._v(" "),t("p",[v._v("函数内使用命令return设置返回值，0表示成功，1表示失败")]),v._v(" "),t("p",[v._v("函数内可以创建和修改变量。函数内的变量其他程序可以访问（即使函数已返回")])])}]};v.exports={attributes:{layout:"collection",title:"bash",collection:"LinuxProgrammingEnvironment"},vue:{render:t.render,staticRenderFns:t.staticRenderFns,component:{data:function(){return{templateRender:null}},render:function(v){return this.templateRender?this.templateRender():v("div","Rendering")},created:function(){this.templateRender=t.render,this.$options.staticRenderFns=t.staticRenderFns}}}}},703:function(v,_,e){v.exports=e.p+"img/db3c93a.png"},704:function(v,_,e){v.exports=e.p+"img/d365f2d.png"}}]);