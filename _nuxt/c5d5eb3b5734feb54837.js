(window.webpackJsonp=window.webpackJsonp||[]).push([[41,470,471,472,473,474,475,476],{1112:function(v,_,e){const r={render:function(){this.$createElement;return this._self._c,this._m(0)},staticRenderFns:[function(){var v=this,_=v.$createElement,r=v._self._c||_;return r("div",{staticClass:"frontmatter-markdown"},[r("h2",{attrs:{id:"复习"}},[v._v("复习")]),v._v(" "),r("p",[v._v("上下文无关文法，2型文法，生成式要求左侧只能为一个非终结符，对应的识别器为"),r("strong",[v._v("下推自动机PDA(Push Down Automata)")])]),v._v(" "),r("h2",{attrs:{id:"推导树与二义性"}},[v._v("推导树与二义性")]),v._v(" "),r("h3",{attrs:{id:"规约与推导"}},[v._v("规约与推导")]),v._v(" "),r("p",[v._v("判断字符串是否属于某语言的方法：")]),v._v(" "),r("ul",[r("li",[v._v("规约\n"),r("ul",[r("li",[v._v("自下而上")]),v._v(" "),r("li",[v._v("把生成式的右部(body)替换为生成式的左部(head)")]),v._v(" "),r("li",[v._v("把字符串中的符号用生成式替代，最后得到生成式的起始符号")])])]),v._v(" "),r("li",[v._v("推导\n"),r("ul",[r("li",[v._v("自上而下")]),v._v(" "),r("li",[v._v("把生成式的左部(head)替换为生成式的右部(body)")]),v._v(" "),r("li",[v._v("从生成式的起始符号推导出字符串")])])])]),v._v(" "),r("p",[r("strong",[v._v("最左推导(leftmost derivations)")]),v._v("：每次推导只替换出现在最左边的非终结符")]),v._v(" "),r("p",[v._v("最左推导关系用"),r("img",{attrs:{src:e(663),alt:"3-1"}}),v._v("符号表示，其传递闭包用"),r("img",{attrs:{src:e(664),alt:"3-3"}}),v._v("表示")]),v._v(" "),r("p",[v._v("最左推导举例：")]),v._v(" "),r("p",[r("img",{attrs:{src:e(665),alt:"3-2"}})]),v._v(" "),r("p",[r("strong",[v._v("最右推导(rightmost derivations)")]),v._v("：每次推导只替换出现在最右边的非终结符。")]),v._v(" "),r("p",[v._v("最右推导的符号等于上面最左推导的符号里面的"),r("code",{pre:!0},[v._v("l")]),v._v("换成"),r("code",{pre:!0},[v._v("r")])]),v._v(" "),r("p",[v._v("最右推导举例：")]),v._v(" "),r("p",[r("img",{attrs:{src:e(666),alt:"3-4"}})]),v._v(" "),r("h3",{attrs:{id:"推导树"}},[v._v("推导树")]),v._v(" "),r("p",[v._v("使用图的方法表示一个串的推导")]),v._v(" "),r("p",[v._v("推导树举例：")]),v._v(" "),r("p",[r("img",{attrs:{src:e(667),alt:"3-5"}})]),v._v(" "),r("p",[r("strong",[v._v("边缘")]),v._v("：所有叶子节点从左向右组成的串称为推导树的边缘")]),v._v(" "),r("p",[v._v("显然某个推导树的边缘就是这个推导树生成的串")]),v._v(" "),r("h3",{attrs:{id:"二义性"}},[v._v("二义性")]),v._v(" "),r("p",[v._v("上面的例子可以看出同一个串可能会有多个推导树")]),v._v(" "),r("p",[v._v("定义：2型文法是二义的，当且仅当对于串ω，存在两棵不同的具有边缘为ω的推导树")]),v._v(" "),r("p",[v._v("如果文法是二义的，那么它所产生的某个串必然能从不同的最左（右）推导推出")]),v._v(" "),r("p",[r("strong",[v._v("无消除二义性的一般算法")])]),v._v(" "),r("h2",{attrs:{id:"上下文无关文法的变换"}},[v._v("上下文无关文法的变换")]),v._v(" "),r("h3",{attrs:{id:"生成式的标准形式"}},[v._v("生成式的标准形式")]),v._v(" "),r("p",[r("strong",[v._v("Chomsky范式(CNF - Chomsky Normal Form)")])]),v._v(" "),r("p",[v._v("生成式格式为")]),v._v(" "),r("pre",[r("code",{pre:!0},[v._v("A -> BC\nA -> a\nA/B/C为非终结符\na为终结符\n")])]),v._v(" "),r("p",[r("strong",[v._v("Greibach范式(GNF - Greibach Normal Form)")])]),v._v(" "),r("p",[v._v("生成式格式为")]),v._v(" "),r("pre",[r("code",{pre:!0},[v._v("A -> aω\nA为非终结符\na为终结符\nω为非终结符串（可以为空）\n")])]),v._v(" "),r("p",[v._v("意义：对每个2型语言都可以找到一个文法使产生式的右端以终结符开始。思想为"),r("strong",[v._v("消除左递归")])]),v._v(" "),r("h3",{attrs:{id:"算法1-找出生成符号"}},[v._v("算法1 找出生成符号")]),v._v(" "),r("p",[v._v("递归：")]),v._v(" "),r("ul",[r("li",[v._v("任何终结符都是生成符号")]),v._v(" "),r("li",[v._v("如果有生成式"),r("code",{pre:!0},[v._v("A -> ω")]),v._v("，ω中的每一个符号都是生成符号，则A也是生成符号")])]),v._v(" "),r("h3",{attrs:{id:"算法2-找出可达符号"}},[v._v("算法2 找出可达符号")]),v._v(" "),r("p",[v._v("递归：")]),v._v(" "),r("ul",[r("li",[v._v("初始符号S是可达符号")]),v._v(" "),r("li",[v._v("如果有生成式"),r("code",{pre:!0},[v._v("A -> ω")]),v._v("，A是可达符号，则ω中的所有非终结符为可达符号")])]),v._v(" "),r("p",[v._v("如果要消除非生成符号和不可达符号，"),r("strong",[v._v("必须先执行算法1再执行算法2，不能颠倒")]),v._v("，否则可能会导致无用符号没有被完全删除。")]),v._v(" "),r("p",[v._v("例：已知2型文法"),r("code",{pre:!0},[v._v("F = ({S, A, B}, {a}, P, S)")]),v._v("，其中生成式P：")]),v._v(" "),r("pre",[r("code",{pre:!0},[v._v("S -> AB\nS -> a\nA -> a\n")])]),v._v(" "),r("p",[v._v("如果先执行算法2再执行算法1")]),v._v(" "),r("ol",[r("li",[v._v("消除不可达符号：无")]),v._v(" "),r("li",[v._v("消除非生成符号：B，因此删除生成式"),r("code",{pre:!0},[v._v("S -> AB")])])]),v._v(" "),r("p",[v._v("此时非生成符A变为不可达符号")]),v._v(" "),r("h3",{attrs:{id:"算法3-消除ε产生式"}},[v._v("算法3 消除ε产生式")]),v._v(" "),r("p",[v._v("目的：使文法规范化")]),v._v(" "),r("p",[v._v("定义：")]),v._v(" "),r("ul",[r("li",[v._v("可致空符号：可通过一系列变换生成空串的符号")]),v._v(" "),r("li",[v._v("无ε文法：生成式中无任何ε产生式，或只有一个可致空符号"),r("code",{pre:!0},[v._v("S -> ε")]),v._v("且S不出现在任何生成式的右边")])]),v._v(" "),r("p",[v._v("方法：若原文法生成式右侧存在致空符号，则无ε文法的生成式在拥有原生成式的基础上添加把致空符号视为空串得到的新生成式")]),v._v(" "),r("p",[v._v("举例：假设存在生成式"),r("code",{pre:!0},[v._v("S -> ABCDE")]),v._v("，其中A、C、E可致空")]),v._v(" "),r("p",[v._v("将“把致空符号视为空串”编码为0，“把致空符号视为普通生成符号”编码为1，那么排列ACE应得到8种情况，从000到111")]),v._v(" "),r("p",[v._v("那么无ε文法将得到如下生成式：")]),v._v(" "),r("pre",[r("code",{pre:!0},[v._v("S -> BD    (000)\nS -> BDE   (001)\nS -> BCD   (010)\nS -> BCDE  (011)\nS -> ABD   (100)\nS -> ABDE  (101)\nS -> ABCD  (110)\nS -> ABCDE (111)\n")])]),v._v(" "),r("p",[v._v("如果化简到最后初始符号S可致空且S出现在了生成式右边，则消除"),r("code",{pre:!0},[v._v("S -> ε")]),v._v("，添加新符号"),r("code",{pre:!0},[v._v("S'")]),v._v("，拥有如下生成式：")]),v._v(" "),r("pre",[r("code",{pre:!0},[v._v("S' -> S | ε\n")])]),v._v(" "),r("p",[v._v("消除ε产生式之后会产生非生成符号，需要再调用算法1")]),v._v(" "),r("h3",{attrs:{id:"算法4-消除单产生式"}},[v._v("算法4 消除单产生式")]),v._v(" "),r("p",[r("strong",[v._v("单产生式")]),v._v("：形如"),r("code",{pre:!0},[v._v("A -> B")]),v._v("的产生式，其中AB为非终结符")]),v._v(" "),r("p",[v._v("目的：减少推导步数，规范文法")]),v._v(" "),r("p",[r("strong",[v._v("单元偶对(unit pairs)")]),v._v("：称"),r("code",{pre:!0},[v._v("(A, B)")]),v._v("是单元偶对当且仅当A可以仅使用单生成式生成B")]),v._v(" "),r("p",[v._v("思路：如果存在单元偶对"),r("code",{pre:!0},[v._v("(A, B)")]),v._v("和非单生成式"),r("code",{pre:!0},[v._v("B -> ω")]),v._v("，则加入生成式"),r("code",{pre:!0},[v._v("A -> ω")])]),v._v(" "),r("p",[v._v("例题：2型文法"),r("code",{pre:!0},[v._v("G = ({S, A, B}, {(, ), +, *, a}, P, S)")]),v._v("，其中生成式P：")]),v._v(" "),r("pre",[r("code",{pre:!0},[v._v("S -> S + A | A\nA -> A * B | B\nB -> (S) | a\n")])]),v._v(" "),r("p",[v._v("其中的单元偶对")]),v._v(" "),r("ul",[r("li",[v._v("(S, A)")]),v._v(" "),r("li",[v._v("(A, B)")]),v._v(" "),r("li",[v._v("(S, B)")])]),v._v(" "),r("p",[v._v("所以得到如下新生成式")]),v._v(" "),r("pre",[r("code",{pre:!0},[v._v("(S, A) & A -> A * B => S -> A * B\n(A, B) & B -> (S) => A -> (S)\n(A, B) & B -> a => A -> a\n(S, B) & B -> (S) => S -> (S)\n(S, B) & B -> a => S -> a\n")])]),v._v(" "),r("h3",{attrs:{id:"小结"}},[v._v("小结")]),v._v(" "),r("p",[v._v("简化2型文法的步骤（注意顺序）")]),v._v(" "),r("ol",[r("li",[v._v("消除ε产生式 - 算法3")]),v._v(" "),r("li",[v._v("消除单产生式 - 算法4")]),v._v(" "),r("li",[v._v("消除非生成符号 - 算法1")]),v._v(" "),r("li",[v._v("消除不可达符号 - 算法2")])]),v._v(" "),r("h3",{attrs:{id:"算法5-消除左递归"}},[v._v("算法5 消除左递归")]),v._v(" "),r("p",[v._v("左递归格式："),r("code",{pre:!0},[v._v("A -> Aω")])]),v._v(" "),r("p",[v._v("思想：假设存在生成式"),r("code",{pre:!0},[v._v("A -> Aa | b")]),v._v("，显然A的正则式是"),r("code",{pre:!0},[v._v("ba*")]),v._v("。所以消除左递归之后应存在如下生成式：")]),v._v(" "),r("pre",[r("code",{pre:!0},[v._v("A -> b | bB\nB -> aB | a\n")])]),v._v(" "),r("p",[v._v("这样的正则式也是"),r("code",{pre:!0},[v._v("ba*")])]),v._v(" "),r("p",[v._v("推广：假设存在如下生成式")]),v._v(" "),r("pre",[r("code",{pre:!0},[v._v("A -> Aω1 | Aω2 | ... | Aωm | a1 | a2 | ... | an\n")])]),v._v(" "),r("p",[v._v("则消除左递归后的文法应使用如下生成式取代上述生成式：")]),v._v(" "),r("pre",[r("code",{pre:!0},[v._v("A -> a1B | a2B | ... anB | a1 | a2 | ... | an\nB -> ω1B | ω2B | ... ωmB | ω1 | ω2 | ... | ωm\n")])]),v._v(" "),r("p",[v._v("上述二者的正则式都是"),r("code",{pre:!0},[v._v("(a1 + a2 + ... + an)(ω1 + ω2 + ... + ωm)*")])]),v._v(" "),r("p",[v._v("例题：已知如下生成式")]),v._v(" "),r("pre",[r("code",{pre:!0},[v._v("S -> S + A | A\nA -> A * B | B\nB -> (S) | a\n")])]),v._v(" "),r("p",[v._v("则新文法应含有如下生成式：")]),v._v(" "),r("pre",[r("code",{pre:!0},[v._v("S -> AS' | A\nS' -> + AS' | + A\nA -> BA' | B\nA' -> * BA' | * B\nB -> (S) | a\n")])]),v._v(" "),r("h2",{attrs:{id:"cnf-gnf"}},[v._v("CNF & GNF")]),v._v(" "),r("p",[v._v("Chomsky范式(Chomsky Normal Form) & Greibach范式(Greibach Normal Form)")]),v._v(" "),r("h3",{attrs:{id:"2型文法转换为等价cnf"}},[v._v("2型文法转换为等价CNF")]),v._v(" "),r("p",[v._v("CNF文法格式："),r("code",{pre:!0},[v._v("A -> BC | a")])]),v._v(" "),r("p",[v._v("构造CNF步骤：")]),v._v(" "),r("ol",[r("li",[v._v("使用算法1、2、3、4消除ε生成式、无用符号、单生成式")]),v._v(" "),r("li",[v._v("转换"),r("code",{pre:!0},[v._v("A -> D1D2...Dn")]),v._v("：\n"),r("ul",[r("li",[v._v("如果Di为终结符，则引入新生成式"),r("code",{pre:!0},[v._v("Bi -> Di")]),v._v("，Bi是新的非终结符")]),v._v(" "),r("li",[v._v("如果Di为非终结符，则令"),r("code",{pre:!0},[v._v("Bi = Di")]),v._v("，原生成式变化为"),r("code",{pre:!0},[v._v("A -> B1B2...Bn")]),v._v("。如果n大于2，则将其变为"),r("code",{pre:!0},[v._v("A -> B1C1, C1 -> B2C2, ...")]),v._v("，其中Ci为新引入的非终结符")])])])]),v._v(" "),r("p",[v._v("例题：已知"),r("code",{pre:!0},[v._v("G = {A, B, S}, {a, b}, P, S)")]),v._v("是无ε、无循环、无无用符号、无单生成式的文法，生成式：")]),v._v(" "),r("pre",[r("code",{pre:!0},[v._v("S -> aAB | BA\nA -> BBB | a\nB -> AS | b\n")])]),v._v(" "),r("p",[v._v("解："),r("code",{pre:!0},[v._v("S -> BA, A -> a, B -> AS, B -> b")]),v._v("已经是CNF。把"),r("code",{pre:!0},[v._v("S -> aAB")]),v._v("变换为"),r("code",{pre:!0},[v._v("S -> C1C2, C1 -> a, C2 -> AB")]),v._v("，把"),r("code",{pre:!0},[v._v("A -> BBB")]),v._v("变换为"),r("code",{pre:!0},[v._v("A -> BC3, C3 -> BB")])]),v._v(" "),r("h3",{attrs:{id:"2型文法转换为等价gnf"}},[v._v("2型文法转换为等价GNF")]),v._v(" "),r("p",[v._v("GNF生成式格式："),r("code",{pre:!0},[v._v("A -> aω")]),v._v("，其中ω为非终结符串（可以为空）")]),v._v(" "),r("p",[v._v("GNF构造步骤")]),v._v(" "),r("ol",[r("li",[v._v("把2型文法变换为CNF")]),v._v(" "),r("li",[v._v("对非终结符进行编号")]),v._v(" "),r("li",[v._v("如果存在生成式"),r("code",{pre:!0},[v._v("Ai -> Aj ω")]),v._v("其中Ai的编号不小于Aj的编号，则把之前Aj的生成式代入，直到左侧非终结符Ai的编号不大于右侧第一个非终结符的编号")]),v._v(" "),r("li",[v._v("消左递归，对"),r("code",{pre:!0},[v._v("An -> Anω")]),v._v("进行变换，得到An的无左递归生成式")]),v._v(" "),r("li",[v._v("把An的无左递归生成式回代如编号小的非终结符的生成式")])]),v._v(" "),r("p",[v._v("例题：已知CNF拥有如下生成式：")]),v._v(" "),r("pre",[r("code",{pre:!0},[v._v("A -> BC\nB -> CA | b\nC -> AB | a\n")])]),v._v(" "),r("p",[v._v("对非终结符进行编号：A - 1, B - 2, C - 3")]),v._v(" "),r("p",[v._v("在生成式"),r("code",{pre:!0},[v._v("C -> AB")]),v._v("中左侧非终结符编号大于右侧第一个非终结符编号，把A的生成式代入得"),r("code",{pre:!0},[v._v("C -> BCB | a")]),v._v("，仍然不满足条件。把B的生成式代入得"),r("code",{pre:!0},[v._v("C -> CACB | bCB | a")])]),v._v(" "),r("p",[v._v("消除左递归，可得")]),v._v(" "),r("pre",[r("code",{pre:!0},[v._v("C -> bCBC' | aC' | bCB | a\nC' -> ACBC' | ACB\n")])]),v._v(" "),r("p",[v._v("现在得到了C的生成式，回代入以C开头的生成式"),r("code",{pre:!0},[v._v("B -> CA")]),v._v("，得到。。。略")]),v._v(" "),r("p",[v._v("就这样最后得到所有非终结符的生成式")]),v._v(" "),r("h2",{attrs:{id:"下推自动机"}},[v._v("下推自动机")]),v._v(" "),r("p",[v._v("PDA(Push Down Automaton)")]),v._v(" "),r("p",[v._v("PDA的形式定义：一个七元组"),r("code",{pre:!0},[v._v("M = (Q, T, Γ, δ, q0, z0, F)")]),v._v("，其中")]),v._v(" "),r("ul",[r("li",[v._v("Q 有限控制器状态集合")]),v._v(" "),r("li",[v._v("T 有限输入字母表")]),v._v(" "),r("li",[v._v("Γ 有限下推栈字母表")]),v._v(" "),r("li",[v._v("δ 状态转移函数")]),v._v(" "),r("li",[v._v("q0 初始状态")]),v._v(" "),r("li",[v._v("z0 下推栈起始符号")]),v._v(" "),r("li",[v._v("F 终态集合")])]),v._v(" "),r("p",[v._v("转换函数的格式："),r("code",{pre:!0},[v._v("δ(q, a, Z) = {(p, ω)}")]),v._v("意为当前状态为q，当前栈顶为Z，接收字符a，转移为状态p，栈顶为ω。如果"),r("code",{pre:!0},[v._v("ω = ε")]),v._v("则弹栈")]),v._v(" "),r("p",[v._v("规定ω中的最左符号位栈顶")]),v._v(" "),r("p",[v._v("下推自动机的图形表示：")]),v._v(" "),r("p",[r("img",{attrs:{src:e(668),alt:"3-6"}})]),v._v(" "),r("ul",[r("li",[v._v("确定的下推自动机DPDA")]),v._v(" "),r("li",[v._v("不确定的下推自动机NPDA")])]),v._v(" "),r("p",[v._v("下推自动机的格局：一个三元组"),r("code",{pre:!0},[v._v("(当前状态, 待处理串, 当前下推栈状态)")])]),v._v(" "),r("p",[v._v("下推自动机的两种接收方式：")]),v._v(" "),r("ul",[r("li",[v._v("终态接收，即接收串后走到终态")]),v._v(" "),r("li",[v._v("空栈接收，即接收串后下推栈为空（连初始栈顶也弹出来了）")])]),v._v(" "),r("p",[v._v("空栈接收与终态接收是可以等价的")]),v._v(" "),r("p",[v._v("使用空栈接收时，终止状态可以为任意状态，此时F取"),r("code",{pre:!0},[v._v("φ")])]),v._v(" "),r("h2",{attrs:{id:"上下文无关文法与下推自动机"}},[v._v("上下文无关文法与下推自动机")]),v._v(" "),r("h3",{attrs:{id:"上下文无关文法构造等价下推自动机"}},[v._v("上下文无关文法构造等价下推自动机")]),v._v(" "),r("p",[v._v("构造出来的下推自动机是按照文法的最左推导方式工作")]),v._v(" "),r("p",[v._v("只需要一个状态q0即可")]),v._v(" "),r("p",[v._v("思路：对于生成式"),r("code",{pre:!0},[v._v("A -> aBC | a")]),v._v("，自动机设置一个空转移函数"),r("code",{pre:!0},[v._v("δ(q0, ε, A) = {(q0, aBC), (q0, a)}")]),v._v("，即A可以无条件地转移到"),r("code",{pre:!0},[v._v("aBC | a")]),v._v("。然后对于所有终结符x，设置转移函数"),r("code",{pre:!0},[v._v("δ(q0, x, x) = (q0, ε)")]),v._v("，即把非终结符从栈中弹出")]),v._v(" "),r("p",[v._v("例题：已知文法拥有如下生成式")]),v._v(" "),r("pre",[r("code",{pre:!0},[v._v("E -> EOE | (E) | v | d\nO -> + | *\n")])]),v._v(" "),r("p",[v._v("则生成的PDA为"),r("code",{pre:!0},[v._v("M = ({q}, {v, d, +, *, (, )}, {E, O, v, d, +, *, (, )}, δ, q, E, φ)")]),v._v("，其中δ定义为：")]),v._v(" "),r("pre",[r("code",{pre:!0},[v._v("用于压栈的函数\nδ(q, ε, E) = {(q, EOE), (q, (E)), (q, v), (q, d)}\nδ(q, ε, O) = {(q, +), (q, *)}\n\n用于弹栈的函数\n   δ(q, v, v)\n = δ(q, d, d)\n = δ(q, +, +)\n = δ(q, *, *)\n = δ(q, (, ()\n = δ(q, ), ))\n = {(q, ε)}\n")])]),v._v(" "),r("p",[v._v("使用此自动机分析串"),r("code",{pre:!0},[v._v("v * (v + d)")]),v._v("的过程为：")]),v._v(" "),r("ol",[r("li",[v._v("首先自动机根据空转移在下推栈中构造出需要分析的串")]),v._v(" "),r("li",[v._v("根据输入弹栈，串输入完毕时栈正好弹空")])]),v._v(" "),r("h3",{attrs:{id:"下推自动机构造等价上下文无关文法"}},[v._v("下推自动机构造等价上下文无关文法")]),v._v(" "),r("p",[v._v("思路：使串在文法中的一个最左推导对应于自动机中的一系列移动")]),v._v(" "),r("p",[r("strong",[v._v("下面的描述，因为课件里面的描述非常迷，所以我按照我的理解进行了修改和补充，请参考着看")])]),v._v(" "),r("p",[v._v("采用形如"),r("code",{pre:!0},[v._v("[q, z, p]")]),v._v("的非终结符，意为"),r("strong",[v._v("一个串的集合")]),v._v("，里面的串满足："),r("strong",[v._v("从q状态出发，栈的内容为zω（即栈顶为z）时，被处理完之后转移到p状态且栈的内容为ω")])]),v._v(" "),r("p",[v._v("以下图为例")]),v._v(" "),r("p",[r("img",{attrs:{src:e(669),alt:"3-7"}})]),v._v(" "),r("p",[v._v("我们有一个状态转移函数"),r("code",{pre:!0},[v._v("δ(q, a, z) = (r, A)")])]),v._v(" "),r("p",[v._v("假设一个串从q出发，经过状态r，最后到达状态p。假设在状态q时栈的内容为zω，那么到达状态r时栈的内容应为Aω。假设到达状态p时栈的内容为ω，即如果一个串“从状态q出发，在栈的内容为zω时，处理完串之后转移到状态p且栈顶为ω”，也就是"),r("code",{pre:!0},[v._v("[q, z, p]")]),v._v("。那么这个串能够被拆分成两部分，第一部分是字符a，自动机在p状态且栈顶为z时接收这个字符a，并把栈顶从z变成A，第二步“从状态r出发，在栈的内容为Aω时，处理完剩下的串之后转移到状态p且栈的内容为ω”，也就是"),r("code",{pre:!0},[v._v("[r, A, p]")])]),v._v(" "),r("p",[v._v("也就是说，原本的串"),r("code",{pre:!0},[v._v("[q, z, p]")]),v._v("被分成了"),r("code",{pre:!0},[v._v("a")]),v._v("和"),r("code",{pre:!0},[v._v("[r, A, p]")]),v._v("两部分，即得到生成式"),r("code",{pre:!0},[v._v("[q, z, p] -> a[r, A, p]")])]),v._v(" "),r("p",[v._v("类似地，可以得到如下结论：")]),v._v(" "),r("pre",[r("code",{pre:!0},[v._v("δ(q, a, z) = (r, ε) => [q, z, r] -> a\nδ(q, a, z) = (r, ABCDE...) => [q, z, p] -> a[r, ABCDE..., p]\n")])]),v._v(" "),r("p",[v._v("当然我们不希望栈顶是“ABCDE…”这么长，那么我们可以在从状态r到状态p的中间状态中选出“断点”状态（这个词是我瞎掰的）。比如：")]),v._v(" "),r("pre",[r("code",{pre:!0},[v._v("[q, z, p] -> a[r, ABCDE...Z, p]\n从r到q中间选择中间点q1, q2, ...q25\n[q, z, p] -> a[r, A, q1][q1, B, q2]...[q25, Z, p]\n")])]),v._v(" "),r("p",[v._v("显然已知"),r("code",{pre:!0},[v._v("δ(q, a, z) = (r, ω)")]),v._v("的时候，因为不知道把串处理完了的时候到达的状态r是哪个状态，所以要把所有的状态作为“到达状态”遍历一遍")]),v._v(" "),r("p",[v._v("例题：已知PDA "),r("code",{pre:!0},[v._v("M = ({q0, q1}, {a, b}, {A, z0}, δ, q0, z0, φ)")]),v._v("，其中状态转移函数：")]),v._v(" "),r("pre",[r("code",{pre:!0},[v._v("δ(q0, a, z0) = {(q0, Az0)}\nδ(q0, a, A) = {(q0, AA)}\nδ(q0, b, A) = {(q1, ε)}\nδ(q1, b, A) = {(q1, ε)}\nδ(q1, ε, A) = {(q1, ε)}\nδ(q1, ε, z0) = {(q1, ε)}\n")])]),v._v(" "),r("p",[v._v("生成文法如下：")]),v._v(" "),r("pre",[r("code",{pre:!0},[v._v("由δ(q0, a, z0) = {(q0, Az0)}，字符串经过此操作后到达的状态可能是q0也可能是q1，所以得到生成式\n[q0, z0, q1] -> a[q0, Az0, q1]\n[q0, z0, q0] -> a[q0, Az0, q0]\n因为生成式右边的栈顶长度不为1，需要再次寻找中间状态来分隔。中间状态可以为q0或者q1，所以得到生成式\n[q0, z0, q1] -> a[q0, A, q0][q0, z0, q1]\n[q0, z0, q1] -> a[q0, A, q1][q1, z0, q1]\n[q0, z0, q0] -> a[q0, A, q0][q0,z0, q1]\n[q0, z0, q0] -> a[q0, A, q1][q1, z0, q1]\n\n由δ(q0, a, A) = {(q0, AA)}可以得到\n[q0, A, q0] -> a[q0, AA, q0]\n[q0, A, q1] -> a[q0, AA, q1]\n进一步分解得到\n[q0, A, q0] -> a[q0, A, q0][q0, A, q0]\n[q0, A, q0] -> a[q0, A, q1][q1, A, 10]\n[q0, A, q1] -> a[q0, A, q0][q0, A, q1]\n[q0, A, q1] -> a[q0, A, q1][q1, A, q1]\n\n由δ(q0, b, A) = {(q1, ε)}可以得到\n[q0, A, q1] -> b\n\n由δ(q1, b, A) = {(q1, ε)}可以得到\n[q1, A, q1] -> b\n\n由δ(q1, ε, A) = {(q1, ε)}可以得到\n[q1, A, q1] -> ε\n\n由δ(q1, ε, z0) = {(q1, ε)}可以得到\n[q1, z0, q1] -> ε\n")])]),v._v(" "),r("p",[v._v("这样就得到了所有生成式，再进行重命名、删除无用符号之后就得到了等价上下文无关文法：")]),v._v(" "),r("pre",[r("code",{pre:!0},[v._v("S -> A\nA -> aCD\nB -> b | ε\nC -> aCB | b\nD -> ε\n")])]),v._v(" "),r("h2",{attrs:{id:"上下文无关语言的性质"}},[v._v("上下文无关语言的性质")]),v._v(" "),r("h3",{attrs:{id:"2型语言的泵浦引理"}},[v._v("2型语言的泵浦引理")]),v._v(" "),r("p",[v._v("设L是上下文无关语言，存在常数p，如果ω是L中的一个串，ω的长度不小于p，则ω可以写为"),r("code",{pre:!0},[v._v("ω1ω2ω0ω3ω4")]),v._v("，使ω2ω3不为空串（即ω2与ω3不同时为空），且ω2ω0ω3的长度不大于p，且对于任意非负整数i，有ω1ω2^iω0ω3^iω4是L的一个串（不含"),r("code",{pre:!0},[v._v("L = { ε }")]),v._v("的情况）")]),v._v(" "),r("p",[v._v("物理意义：和正则的泵浦引理类似。该语言中的一个串ω含有两个靠的很近的子串ω2和ω3，它们可以重复任意多次（但是二者的重复次数相同），所得的新串仍属于该语言")]),v._v(" "),r("p",[v._v("应用过程也与正则泵浦引理类似，用来证明某个语言不是上下文无关文法")]),v._v(" "),r("p",[v._v("例题：证明"),r("code",{pre:!0},[v._v("L = {a^n b^n c^n | n >=1}")]),v._v("不是2型语言")]),v._v(" "),r("p",[v._v("证明：假设L是2型语言，令p为泵长，取L中的一个串"),r("code",{pre:!0},[v._v("ω = a^p b^p c^p")]),v._v("，其串长大于p，则可以将ω写成ω1ω2ω0ω3ω4。考虑"),r("code",{pre:!0},[v._v("ω1 ω2^i ω0 ω3^i ω4")]),v._v("也符合此语言，所以")]),v._v(" "),r("ol",[r("li",[v._v("首先，ω2与ω3不能都为空")]),v._v(" "),r("li",[v._v("如果ω2含有字母，ω3为空，那么为了保证所有字母数量相同，ω2中必须包含等量的a、b、c，所以ω2只能等于ω，不满足ω2ω0ω3的长度不大于p的限制。同理，也不能ω2为空而ω3有字母")]),v._v(" "),r("li",[v._v("ω2与ω3不能分别只含有一种字母或两种字幕，否则第三个字母的数量将不等于ω2ω3中含有的两个字母的数量")]),v._v(" "),r("li",[v._v("假设ω2含有一种字母而ω3含有两种或三种字母，则ω2ω0ω3的长度大于p")])]),v._v(" "),r("p",[v._v("综上所述，不存在这样的一个ω的划分。所以此语言不是2型文法")]),v._v(" "),r("h3",{attrs:{id:"2型语言的封闭性"}},[v._v("2型语言的封闭性")]),v._v(" "),r("p",[v._v("已知2型语言L1，L2，则他们的"),r("strong",[v._v("并、连接、闭包")]),v._v("为2型语言")]),v._v(" "),r("p",[r("strong",[v._v("注意：2型语言对“交”不封闭")])]),v._v(" "),r("p",[v._v("举例：已知"),r("code",{pre:!0},[v._v("L1 = {a^n b^n c^m | m, n >= 1}")]),v._v("为2型语言，"),r("code",{pre:!0},[v._v("L2 = {a^m b^n c^n | m, n >= 1}")]),v._v("为2型语言，二者的交"),r("code",{pre:!0},[v._v("L3 = {a^n b^n c^n | n >= 1}")]),v._v("不是2型语言")]),v._v(" "),r("p",[v._v("2型语言对“补运算”不封闭。因为如果对补运算封闭则对“交”封闭。已知对“交”不封闭所以对“补”不封闭")])])}]};v.exports={attributes:{layout:"collection",title:"上下文无关文法与下推自动机",collection:"FormalLanguageAndAutomata"},vue:{render:r.render,staticRenderFns:r.staticRenderFns,component:{data:function(){return{templateRender:null}},render:function(v){return this.templateRender?this.templateRender():v("div","Rendering")},created:function(){this.templateRender=r.render,this.$options.staticRenderFns=r.staticRenderFns}}}}},663:function(v,_,e){v.exports=e.p+"img/e77c330.png"},664:function(v,_,e){v.exports=e.p+"img/611f1ec.png"},665:function(v,_,e){v.exports=e.p+"img/5035ac6.png"},666:function(v,_,e){v.exports=e.p+"img/0fca69d.png"},667:function(v,_,e){v.exports=e.p+"img/af6b0c3.png"},668:function(v,_,e){v.exports=e.p+"img/e4c0b56.png"},669:function(v,_,e){v.exports=e.p+"img/e25363e.jpg"}}]);