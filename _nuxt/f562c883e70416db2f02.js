(window.webpackJsonp=window.webpackJsonp||[]).push([[28,477,478,479,480,481,482,483,484,485,486,487,488],{1117:function(v,_,t){const r={render:function(){this.$createElement;return this._self._c,this._m(0)},staticRenderFns:[function(){var v=this,_=v.$createElement,r=v._self._c||_;return r("div",{staticClass:"frontmatter-markdown"},[r("h2",{attrs:{id:"预备知识"}},[v._v("预备知识")]),v._v(" "),r("ul",[r("li",[v._v("上下文无关文法\n"),r("ul",[r("li",[v._v("生成式左侧为一个非终结符，右侧为任意")]),v._v(" "),r("li",[v._v("因为生成式左侧只有一个非终结符，不和上下文相关，故被称为上下文无关文法")])])]),v._v(" "),r("li",[v._v("句型与句子\n"),r("ul",[r("li",[v._v("句型 - 从初始符号开始能够推导出来的"),r("strong",[v._v("符号串（包括非终结符")])]),v._v(" "),r("li",[v._v("句子 - 从初始符号开始能够推导出来的"),r("strong",[v._v("终结符号串")])]),v._v(" "),r("li",[v._v("仅包含终结符的句型就是句子")])])]),v._v(" "),r("li",[v._v("推导与归约\n"),r("ul",[r("li",[v._v("推导 - 从初始符号推出句子\n"),r("ul",[r("li",[v._v("最左推导 - 每次都替换最左边的非终结符")]),v._v(" "),r("li",[v._v("最右推导 - 也称为"),r("strong",[v._v("规范推导")])])])]),v._v(" "),r("li",[v._v("归约 - 从句子归纳为初始符号")]),v._v(" "),r("li",[v._v("最右规约 - 每次都规约最右边的符号串。最左推导的逆过程。")]),v._v(" "),r("li",[v._v("最左归约 - 每次都归约最左边的符号串。"),r("strong",[v._v("最右推导的逆过程")]),v._v("，也称为"),r("strong",[v._v("规范归约")])])])])]),v._v(" "),r("p",[v._v("推导相关的符号：")]),v._v(" "),r("ul",[r("li",[v._v("一步推导（下文中使用"),r("code",{pre:!0},[v._v("=>")]),v._v("表示\n"),r("ul",[r("li",[r("img",{attrs:{src:t(671),alt:"3-1"}})])])]),v._v(" "),r("li",[v._v("n步推导（下文中使用"),r("code",{pre:!0},[v._v("=n>")]),v._v("表示\n"),r("ul",[r("li",[r("img",{attrs:{src:t(672),alt:"3-5"}})])])]),v._v(" "),r("li",[v._v("至少一步推导（下文中使用"),r("code",{pre:!0},[v._v("=+>")]),v._v("表示\n"),r("ul",[r("li",[r("img",{attrs:{src:t(673),alt:"3-6"}})])])]),v._v(" "),r("li",[v._v("0或n步推导（下文中使用"),r("code",{pre:!0},[v._v("=*>")]),v._v("表示\n"),r("ul",[r("li",[r("img",{attrs:{src:t(674),alt:"3-7"}})])])]),v._v(" "),r("li",[v._v("最左推导\n"),r("ul",[r("li",[r("img",{attrs:{src:t(675),alt:"3-8"}})]),v._v(" "),r("li",[r("img",{attrs:{src:t(676),alt:"3-10"}})])])]),v._v(" "),r("li",[v._v("最右推导\n"),r("ul",[r("li",[r("img",{attrs:{src:t(677),alt:"3-9"}})]),v._v(" "),r("li",[r("img",{attrs:{src:t(678),alt:"3-11"}})])])])]),v._v(" "),r("p",[v._v("自顶向下分析，这里的"),r("strong",[v._v("顶")]),v._v("和"),r("strong",[v._v("下")]),v._v("分别对应"),r("strong",[v._v("分析树")]),v._v("的"),r("strong",[v._v("根")]),v._v("和"),r("strong",[v._v("叶")]),v._v("。自顶向下即从树根分析到树叶，也就是"),r("strong",[v._v("从文法开始符号生成目标串的过程")])]),v._v(" "),r("h2",{attrs:{id:"语法分析器目标"}},[v._v("语法分析器目标")]),v._v(" "),r("ul",[r("li",[v._v("判断输入是否合法")]),v._v(" "),r("li",[v._v("输出所使用的生成式")])]),v._v(" "),r("h2",{attrs:{id:"自顶向下分析方法"}},[v._v("自顶向下分析方法")]),v._v(" "),r("h3",{attrs:{id:"递归下降分析"}},[v._v("递归下降分析")]),v._v(" "),r("p",[v._v("从文法的开始符号向下一直"),r("strong",[v._v("推导试探")]),v._v("，试图建立一个"),r("strong",[v._v("最左推导")]),v._v("。")]),v._v(" "),r("p",[v._v("如：把各个生成式编号，然后遍历看此生成式能不能被使用（即使生成式的第一个符号为非终结符")]),v._v(" "),r("p",[r("strong",[v._v("为什么使用最左推导")]),v._v(" - 因为对输入串的扫描是从左至右的")]),v._v(" "),r("p",[v._v("缺点：")]),v._v(" "),r("ul",[r("li",[r("strong",[v._v("不能存在左递归")]),v._v(" - 会死循环，引起"),r("strong",[v._v("无穷推导")])]),v._v(" "),r("li",[v._v("如果文法存在"),r("strong",[v._v("回溯")]),v._v("则会导致工作重复、效率低（详见后文")])]),v._v(" "),r("h3",{attrs:{id:"递归调用预测分析特殊的递归下降分析"}},[v._v("递归调用预测分析（特殊的递归下降分析")]),v._v(" "),r("p",[v._v("一种确定的、不带回溯的递归下降分析方法")]),v._v(" "),r("p",[v._v("思想：消除文法的左递归和回溯")]),v._v(" "),r("h4",{attrs:{id:"左递归消除技术"}},[v._v("左递归消除技术")]),v._v(" "),r("p",[r("strong",[v._v("消除直接左递归")]),v._v("（"),r("strong",[v._v("转换为右递归")]),v._v("）：把左递归式"),r("code",{pre:!0},[v._v("A -> Aa | b")]),v._v("转换为"),r("code",{pre:!0},[v._v("A -> bA'")]),v._v("和"),r("code",{pre:!0},[v._v("A' -> aA' | ε")]),v._v("，二者的正则式都是"),r("code",{pre:!0},[v._v("ba*")])]),v._v(" "),r("p",[r("strong",[v._v("消除间接左递归")]),v._v("思想：先给非终结符排序，然后通过一些操作使"),r("strong",[v._v("大索引非终结符无法生成小索引非终结符开头的候选式")]),v._v("，这样即使存在小索引非终结符生成大索引非终结符开头的候选式也不会构成间接左递归")]),v._v(" "),r("p",[v._v("消除间接左递归"),r("strong",[v._v("算法")]),v._v("：")]),v._v(" "),r("pre",{staticClass:"language-c++"},[r("code",{pre:!0,attrs:{class:"language-c++"}},[v._v("//要求输入为无环无ε产生式的文法，所以要先消空\n把文法G中的所有非终结符号排序为A1, A2, ..., An\nfor (i = 1; i <= n; ++i){\n\t消除Ai产生式中的直接左递归\n\tfor (j = 1; j <= i - 1; ++j){\n\t\tif (Aj -> δ1 | δ2 | ... | δn是当前关于Aj的所有产生式){\n\t\t\tif (存在形如Ai -> Ajγ的生成式){\n\t\t\t\t把每个形如Ai -> Ajγ的产生式改写为Ai -> δ1γ | δ2γ | ... | δnγ\n\t\t\t}\n\t\t\t消除Ai产生式中的直接左递归\n\t\t}\n\t}\n}\n化简文法，去除无用的非终结符和产生式\n")])]),v._v(" "),r("h4",{attrs:{id:"回溯问题的尝试解决"}},[v._v("回溯问题的尝试解决")]),v._v(" "),r("p",[v._v("考虑文法"),r("code",{pre:!0},[v._v("A -> aA | aB")]),v._v("，当试探"),r("code",{pre:!0},[v._v("aA")]),v._v("失败时会试探"),r("code",{pre:!0},[v._v("aB")]),v._v("，这时因为两个"),r("strong",[v._v("候选式左侧有相同的成分")]),v._v("所以在"),r("code",{pre:!0},[v._v("a")]),v._v("被匹配时，如果"),r("code",{pre:!0},[v._v("aA")]),r("strong",[v._v("失配")]),v._v("了要"),r("strong",[v._v("回来匹配")]),r("code",{pre:!0},[v._v("aB")]),v._v("，这就是"),r("strong",[v._v("回溯")]),v._v("。")]),v._v(" "),r("p",[v._v("我们希望生成没有回溯的文法，即"),r("strong",[v._v("面对一个输入的符号，可以确定使用当前符号的哪个候选式")])]),v._v(" "),r("p",[v._v("避免回溯，对文法的要求：")]),v._v(" "),r("ul",[r("li",[v._v("不含左递归（所以要先消左递归")]),v._v(" "),r("li",[v._v("同一个非终结符的任意两个候选式的FIRST集不相交（FIRST集详见后文非递归预测分析表的构造")])]),v._v(" "),r("p",[v._v("例：判断下面的文法是否存在回溯：")]),v._v(" "),r("pre",[r("code",{pre:!0},[v._v("A -> aB | BA\nB -> aA\n")])]),v._v(" "),r("p",[v._v("答案是存在回溯的，因为FIRST(aB)和FIRST(BC)存在交集{a}，所以判断是否存在回溯"),r("strong",[v._v("不能只看公共前缀")])]),v._v(" "),r("p",[v._v("解决方法："),r("strong",[v._v("提取左公因子")]),v._v("（只能减少，不能完全消除）。思路：使文法每个候选式都有"),r("strong",[v._v("不同的前缀")]),v._v("，根据此前缀就可以"),r("strong",[v._v("一次性确定使用哪个候选式")]),v._v("而不用回溯。即生成类似这样的文法："),r("code",{pre:!0},[v._v("A -> aA | bB")]),v._v("，通过匹配"),r("code",{pre:!0},[v._v("a")]),v._v("或者"),r("code",{pre:!0},[v._v("b")]),v._v("，我们就可以选定使用候选式"),r("code",{pre:!0},[v._v("aA")]),v._v("还是"),r("code",{pre:!0},[v._v("bB")]),v._v("，"),r("strong",[v._v("失配即为出错而不需要回溯")])]),v._v(" "),r("h4",{attrs:{id:"递归调用预测分析程序的构造"}},[v._v("递归调用预测分析程序的构造")]),v._v(" "),r("ol",[r("li",[v._v("消除左递归，使用提取左公因子方案尽量消除回溯（"),r("strong",[v._v("切记勿忘")]),v._v("（如果没有完全消除回溯就会产生冲突而无法分析")]),v._v(" "),r("li",[v._v("为"),r("strong",[v._v("每个终结符号")]),v._v("建立状态转换图，如"),r("code",{pre:!0},[v._v("F -> (E) | id")])])]),v._v(" "),r("p",[r("img",{attrs:{src:t(679),alt:"3-12"}})]),v._v(" "),r("p",[v._v("可以看到图中允许出现非终结符")]),v._v(" "),r("ol",{attrs:{start:"3"}},[r("li",[v._v("合并状态，化简状态转换图")]),v._v(" "),r("li",[v._v("根据状态转换图，构造预测分析程序的各个函数（每个非终结符一个状态转换图，一个函数）")])]),v._v(" "),r("p",[v._v("如上述的"),r("code",{pre:!0},[v._v("F -> (E) | id")]),v._v("对应的C语言代码（建议对照着上面的状态转换图看下面的代码）：")]),v._v(" "),r("pre",{staticClass:"language-c++"},[r("code",{pre:!0,attrs:{class:"language-c++"}},[v._v("void procF(){\n\tif (c == '('){\n\t\t指针前移;\n\t\tprocE();\n\t\tif (c == ')'){\n\t\t\t指针前移;\n\t\t\t因为识别了完整的生成式，输出生成式;\n\t\t} else {\n\t\t\terror();\n\t\t}\n\t} else if (c == 'id'){\n\t\t指针前移;\n\t\t因为识别了完整的生成式，输出生成式;\n\t} else {\n\t\terror();\n\t}\n}\n")])]),v._v(" "),r("p",[v._v("可以看到处理终结符就是指针前移的过程，处理非终结符就是调用对应函数的过程。总体来说是一个递归的过程。")]),v._v(" "),r("p",[v._v("如果产生回溯冲突，即存在两个候选式的FIRST集相交的情况，那么在函数中就不知道该调用哪个函数，所以"),r("strong",[v._v("自顶向下分析严禁出现回溯")])]),v._v(" "),r("h3",{attrs:{id:"非递归预测分析"}},[v._v("非递归预测分析")]),v._v(" "),r("p",[v._v("非递归预测分析在选定一个候选式后"),r("strong",[v._v("不再考虑回溯")]),v._v("的情况，直接试图匹配此候选式（类似于尾递归")]),v._v(" "),r("p",[v._v("分析所需材料：")]),v._v(" "),r("ul",[r("li",[v._v("一个"),r("strong",[v._v("分析表")])]),v._v(" "),r("li",[v._v("一个"),r("strong",[v._v("分析栈")])])]),v._v(" "),r("p",[v._v("举例：考虑如下文法")]),v._v(" "),r("pre",[r("code",{pre:!0},[v._v("E -> TE'\nE' -> +TE'\nE' -> ε\nT -> FT'\nT' -> ε\nF -> id\n")])]),v._v(" "),r("p",[v._v("构造分析表：")]),v._v(" "),r("p",[r("img",{attrs:{src:t(345),alt:""}})]),v._v(" "),r("p",[v._v("分析表和分析栈的使用：")]),v._v(" "),r("ul",[r("li",[v._v("如果分析栈的栈顶为终结符\n"),r("ul",[r("li",[v._v("如果输入的下一个字符为正确的终结符则匹配成功，弹栈")]),v._v(" "),r("li",[v._v("如果输入的下一个字符为错误的终结符则匹配失败")])])]),v._v(" "),r("li",[v._v("如果分析栈的栈顶为非终结符，使用分析表，把对应的分析表项"),r("strong",[v._v("逆向")]),v._v("（从右向左）压栈")])]),v._v(" "),r("h4",{attrs:{id:"使用分析表和分析栈解析输入串"}},[v._v("使用分析表和分析栈解析输入串")]),v._v(" "),r("p",[v._v("使用上述文法和分析表分析输入串"),r("code",{pre:!0},[v._v("id+id*id")]),v._v("解题过程：")]),v._v(" "),r("p",[v._v("首先把输入串的结束符"),r("code",{pre:!0},[v._v("$")]),v._v("压入栈底（这样匹配结束的标志就是栈底"),r("code",{pre:!0},[v._v("$")]),v._v("和输入的"),r("code",{pre:!0},[v._v("$")]),v._v("消除），然后把初始非终结符压入栈。")]),v._v(" "),r("p",[v._v("注意把候选式压栈时候要逆向压栈")]),v._v(" "),r("p",[v._v("输出行为或使用的生成式")]),v._v(" "),r("table",[r("thead",[r("tr",[r("th",[v._v("分析栈")]),v._v(" "),r("th",[v._v("输入")]),v._v(" "),r("th",[v._v("输出")])])]),v._v(" "),r("tbody",[r("tr",[r("td",[r("code",{pre:!0},[v._v("$E")])]),v._v(" "),r("td",[r("code",{pre:!0},[v._v("id+id*id$")])]),v._v(" "),r("td",[r("code",{pre:!0},[v._v("E -> TE'")])])]),v._v(" "),r("tr",[r("td",[r("code",{pre:!0},[v._v("$E'T")])]),v._v(" "),r("td",[r("code",{pre:!0},[v._v("id+id*id$")])]),v._v(" "),r("td",[r("code",{pre:!0},[v._v("T -> FT'")])])]),v._v(" "),r("tr",[r("td",[r("code",{pre:!0},[v._v("$E'T'F")])]),v._v(" "),r("td",[r("code",{pre:!0},[v._v("id+id*id$")])]),v._v(" "),r("td",[r("code",{pre:!0},[v._v("F -> id")])])]),v._v(" "),r("tr",[r("td",[r("code",{pre:!0},[v._v("$E'T'id")])]),v._v(" "),r("td",[r("code",{pre:!0},[v._v("id+id*id$")])]),v._v(" "),r("td",[r("code",{pre:!0},[v._v("match id")])])]),v._v(" "),r("tr",[r("td",[r("code",{pre:!0},[v._v("$E'T'")])]),v._v(" "),r("td",[r("code",{pre:!0},[v._v("+id*id$")])]),v._v(" "),r("td",[r("code",{pre:!0},[v._v("T' -> ε")])])]),v._v(" "),r("tr",[r("td",[r("code",{pre:!0},[v._v("$E'")])]),v._v(" "),r("td",[r("code",{pre:!0},[v._v("+id*id$")])]),v._v(" "),r("td",[r("code",{pre:!0},[v._v("E' -> +TE'")])])]),v._v(" "),r("tr",[r("td",[r("code",{pre:!0},[v._v("$E'T+")])]),v._v(" "),r("td",[r("code",{pre:!0},[v._v("+id*id$")])]),v._v(" "),r("td",[r("code",{pre:!0},[v._v("match +")])])]),v._v(" "),r("tr",[r("td",[r("code",{pre:!0},[v._v("$E'T")])]),v._v(" "),r("td",[r("code",{pre:!0},[v._v("id*id$")])]),v._v(" "),r("td",[r("code",{pre:!0},[v._v("T -> FT'")])])]),v._v(" "),r("tr",[r("td",[r("code",{pre:!0},[v._v("$E'T'F")])]),v._v(" "),r("td",[r("code",{pre:!0},[v._v("id*id$")])]),v._v(" "),r("td",[r("code",{pre:!0},[v._v("F -> id")])])]),v._v(" "),r("tr",[r("td",[v._v("…")]),v._v(" "),r("td",[v._v("…")]),v._v(" "),r("td",[v._v("…")])]),v._v(" "),r("tr",[r("td",[r("code",{pre:!0},[v._v("$E'T'id")])]),v._v(" "),r("td",[r("code",{pre:!0},[v._v("id$")])]),v._v(" "),r("td",[r("code",{pre:!0},[v._v("match id")])])]),v._v(" "),r("tr",[r("td",[r("code",{pre:!0},[v._v("$E'T'")])]),v._v(" "),r("td",[r("code",{pre:!0},[v._v("$")])]),v._v(" "),r("td",[r("code",{pre:!0},[v._v("T' -> ε")])])]),v._v(" "),r("tr",[r("td",[r("code",{pre:!0},[v._v("$E'")])]),v._v(" "),r("td",[r("code",{pre:!0},[v._v("$")])]),v._v(" "),r("td",[r("code",{pre:!0},[v._v("E' -> ε")])])]),v._v(" "),r("tr",[r("td",[r("code",{pre:!0},[v._v("$")])]),v._v(" "),r("td",[r("code",{pre:!0},[v._v("$")])]),v._v(" "),r("td",[r("code",{pre:!0},[v._v("accept")])])])])]),v._v(" "),r("h4",{attrs:{id:"分析表的构造"}},[v._v("分析表的构造")]),v._v(" "),r("p",[v._v("定义两个重要集合（构造方法略）：")]),v._v(" "),r("ul",[r("li",[v._v("句型α的FIRST集（FIRST(α)） - 此句型能推出的所有句子的首终结符的集合（可以包含ε")]),v._v(" "),r("li",[v._v("非终结符A的FOLLOW集（FOLLOW(A)） - 此非终结符后面的句型的FIRST集（不可以包含ε，可以包含"),r("code",{pre:!0},[v._v("$")]),v._v("（输入符号串的结束符")])]),v._v(" "),r("p",[v._v("分析表的构造思想：当栈顶为非终结符A且输入为终结符a时，应使用一个唯一的（多步）推导"),r("code",{pre:!0},[v._v("A =+> axxx")]),v._v("来推出a，也就是把"),r("code",{pre:!0},[v._v("xxxa")]),v._v("压入栈（逆向压栈），这样栈顶a和输入a就可以匹配。所以")]),v._v(" "),r("ul",[r("li",[v._v("如果存在生成式"),r("code",{pre:!0},[v._v("A -> ω")]),v._v("且FIRST(ω)（即FIRST(A)）中存在a，那么表项"),r("code",{pre:!0},[v._v("[A, a]")]),v._v("中应该放入生成式"),r("code",{pre:!0},[v._v("A -> ω")])]),v._v(" "),r("li",[v._v("如果经过（多步）推导得到"),r("code",{pre:!0},[v._v("A =+> ε")]),v._v("（即ε在FIRST(A)中），则A可能推出空串，由A后面的符号匹配a，也就是用A的FOLLOW集中的元素匹配a，所以如果FOLLOW(A)中包含a则表示A后面的句型能够匹配a，则把"),r("code",{pre:!0},[v._v("A => ε")]),v._v("过程中的第一次推导使用的生成式放到表项[A, a]中")])]),v._v(" "),r("p",[v._v("分析表构造举例：")]),v._v(" "),r("p",[r("img",{attrs:{src:t(345),alt:"3-2"}})]),v._v(" "),r("p",[v._v("如果同一个非终结符的多个候选式的FIRST集有交集，则"),r("strong",[v._v("同一个分析表项需要填超过一个候选式，也就是产生了冲突")]),v._v("。如果一个候选式为空串"),r("code",{pre:!0},[v._v("ε")]),v._v("，则表明此符号可能被跳过，所以调用空串候选式时后面出现的第一个终结符应该为此非终结符的FOLLOW集，所以此时还要看FOLLOW集。（详见下文LL(1)文法")]),v._v(" "),r("h2",{attrs:{id:"错误处理"}},[v._v("错误处理")]),v._v(" "),r("h3",{attrs:{id:"基础应急式错误处理方式"}},[v._v("基础（应急式）错误处理方式")]),v._v(" "),r("ul",[r("li",[v._v("栈顶为终结符，输入失配（视为程序员"),r("strong",[v._v("少写")]),v._v("了），"),r("strong",[v._v("弹出栈顶")])]),v._v(" "),r("li",[v._v("栈顶为非终结符，分析表项为空（视为程序员"),r("strong",[v._v("多写")]),v._v("了），"),r("strong",[v._v("跳过输入符号")])])]),v._v(" "),r("h3",{attrs:{id:"使用同步信息synch"}},[v._v("使用同步信息(synch)")]),v._v(" "),r("p",[v._v("假设分析表中的没有表项[A, a]，但是a在FOLLOW(A)中，即视为程序员"),r("strong",[v._v("少写")]),v._v("了A能够生成的部分，所以应该弹出A")]),v._v(" "),r("p",[v._v("所以在分析表内符合条件的表项加入synch符号如下图")]),v._v(" "),r("p",[r("img",{attrs:{src:t(680),alt:"3-3"}})]),v._v(" "),r("p",[v._v("错误处理方式改为：")]),v._v(" "),r("ul",[r("li",[v._v("栈顶为终结符，输入失配（视为程序员"),r("strong",[v._v("少写")]),v._v("了），"),r("strong",[v._v("弹出栈顶")])]),v._v(" "),r("li",[v._v("栈顶为非终结符\n"),r("ul",[r("li",[v._v("分析表项为空（视为程序员"),r("strong",[v._v("多写")]),v._v("了），"),r("strong",[v._v("跳过输入符号")])]),v._v(" "),r("li",[v._v("分析表项为synch（视为程序员"),r("strong",[v._v("少写")]),v._v("了），"),r("strong",[v._v("弹出栈顶")])])])])]),v._v(" "),r("p",[v._v("使用带有synch的分析表"),r("strong",[v._v("更有可能在出现错误时成功匹配到最后")]),v._v("（即两个"),r("code",{pre:!0},[v._v("$")]),v._v("匹配）从而结束分析程序（防止程序崩溃）")]),v._v(" "),r("h2",{attrs:{id:"ll1文法"}},[v._v("LL(1)文法")]),v._v(" "),r("p",[v._v("所有无左递归、无左公因子的上下文无关文法都可以使用非递归预测分析法吗？")]),v._v(" "),r("p",[r("strong",[v._v("不能")]),v._v("，如果文法有二义性，那么分析表的单个表项会存在两个生成式")]),v._v(" "),r("p",[r("img",{attrs:{src:t(681),alt:"3-4"}})]),v._v(" "),r("p",[v._v("导致语法分析程序不知道该使用哪个生成式（虽然可以使用回溯解决，但是这违背了我们的初衷")]),v._v(" "),r("h3",{attrs:{id:"定义"}},[v._v("定义")]),v._v(" "),r("p",[r("strong",[v._v("定义LL(1)文法")]),v._v("：如果一个文法的分析表"),r("strong",[v._v("不含多重定义")]),v._v("的表项则称文法为LL(1)文法")]),v._v(" "),r("p",[v._v("显然LL(1)文法一定可以使用非递归预测分析。所以"),r("strong",[v._v("使用LL(1)文法的非递归预测分析")]),v._v("称为"),r("strong",[v._v("LL(1)分析法")])]),v._v(" "),r("p",[v._v("LL(1)的含义：")]),v._v(" "),r("ul",[r("li",[v._v("第一个L - 从左至右输入")]),v._v(" "),r("li",[v._v("第二个L - 生成输入串的最左推导")]),v._v(" "),r("li",[v._v("1 - 分析的时候"),r("strong",[v._v("向前看一个符号")]),v._v("，根据此符号确定分析动作")])]),v._v(" "),r("h3",{attrs:{id:"判定"}},[v._v("判定")]),v._v(" "),r("p",[v._v("根据定义，首先此文法能够生成分析表，这就需要文法"),r("strong",[v._v("不含左递归和左公因子")])]),v._v(" "),r("p",[v._v("其次，需要判断"),r("strong",[v._v("二义性")]),v._v("。如果非终结符A能够推出ε且A的某个非空候选式的FIRST集和FOLLOW(A)中包含相同终结符a，那么当输入a时无法判断应该直接匹配对应非空生成式还是使用ε缺席匹配。")]),v._v(" "),r("h3",{attrs:{id:"结论"}},[v._v("结论")]),v._v(" "),r("p",[r("strong",[v._v("LL(1)文法是无左递归、无回溯、无二义性的文法")])])])}]};v.exports={attributes:{layout:"collection",title:"语法分析 - 自顶向下分析",collection:"FundamentalsOfCompiling"},vue:{render:r.render,staticRenderFns:r.staticRenderFns,component:{data:function(){return{templateRender:null}},render:function(v){return this.templateRender?this.templateRender():v("div","Rendering")},created:function(){this.templateRender=r.render,this.$options.staticRenderFns=r.staticRenderFns}}}}},345:function(v,_,t){v.exports=t.p+"img/36d8d8f.png"},671:function(v,_,t){v.exports=t.p+"img/c65d835.png"},672:function(v,_,t){v.exports=t.p+"img/0e225aa.png"},673:function(v,_,t){v.exports=t.p+"img/23cb171.png"},674:function(v,_,t){v.exports=t.p+"img/89a2e05.png"},675:function(v,_,t){v.exports=t.p+"img/abbdf41.png"},676:function(v,_,t){v.exports=t.p+"img/914b25d.png"},677:function(v,_,t){v.exports=t.p+"img/9d2865f.png"},678:function(v,_,t){v.exports=t.p+"img/fb2bda3.png"},679:function(v,_,t){v.exports=t.p+"img/72056e1.png"},680:function(v,_,t){v.exports=t.p+"img/6ac9cd9.png"},681:function(v,_,t){v.exports=t.p+"img/4941b9a.png"}}]);